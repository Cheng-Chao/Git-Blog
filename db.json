{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/true.jpg","path":"uploads/true.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1482161160000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1482161160000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1482161160000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1482161160000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1482161160000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1482161160000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1482161160000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1482161160000},{"_id":"themes/next/_config.yml","hash":"3d36ec70d164e82e1df720319edc79af8c4937ed","modified":1483879769000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1482161160000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1482161160000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1482161160000},{"_id":"source/_posts/Ajax常用写法.md","hash":"8a4eb6240754baf35a5514b9c23a5bcd4e127381","modified":1483363738000},{"_id":"source/_posts/Image Gallery.md","hash":"cef313cdd4cd221705a61d6df8177bca15e3aeda","modified":1483363669000},{"_id":"source/_posts/GitHub Pages+Hexo搭建博客.md","hash":"8031ac758c47dfe84e8f1a7621c6052b7f88541a","modified":1483880060000},{"_id":"source/_posts/jQuery常用方法.md","hash":"26e1add53767a1dd8d560100d80c3865f653c3c5","modified":1483363848000},{"_id":"source/categories/index.md","hash":"f93a02be48f4cddfcd5d3f7c2cf8543e6b59d99f","modified":1483287193000},{"_id":"source/tags/index.md","hash":"1c0fd4bb513094e351f94d872580b9f30564cb95","modified":1483286916000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1482161160000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1482161160000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1482161160000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1482161160000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1482161160000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1482161160000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1482161160000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1482161160000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1482161160000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1482161160000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1482161160000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1482161160000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"5f2da6800f77b0e453909d00978a4cacfbceeea9","modified":1483321285000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1482161160000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1482161160000},{"_id":"themes/next/layout/_layout.swig","hash":"7a1e4443c3ba1e08c20e64ddbf0b8255d034dab0","modified":1482161160000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1482161160000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1482161160000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1482161160000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1482161160000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1482161160000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1482161160000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1482161160000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1482161160000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1482161160000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1482161160000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1482161160000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1482161160000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1482161160000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1482161160000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1482161160000},{"_id":"themes/next/layout/_macro/post.swig","hash":"39a8efd961ea2c5758ca4231d3cc4108c1856930","modified":1482161160000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1482161160000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1482161160000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4eb278f7b1b7dfe1088c2b411778cc6129df82bb","modified":1482161160000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1482161160000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1482161160000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1482161160000},{"_id":"themes/next/layout/_partials/header.swig","hash":"5696ee15fc21eb3a6416902afcf1df454497c552","modified":1482161160000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1482161160000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1482161160000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1482161160000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1482161160000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1482161160000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1482161160000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1482161160000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1482161160000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1482161160000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1482161160000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1482161160000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1482161160000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1482161160000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1482161160000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1482161160000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1482161160000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1482161160000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1482161160000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1482161160000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1482161160000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1482161160000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1482161160000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1482161160000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1482161160000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1482161160000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1482161160000},{"_id":"themes/next/source/uploads/true.jpg","hash":"2da59952a921bba3796a1096529bcc1171fdb685","modified":1483322288015},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482161160000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1482161160000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1482161160000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1482161160000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1482161160000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1482161160000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1482161160000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1482161160000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1482161160000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1482161160000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1482161160000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1482161160000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1482161160000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"417e16a0fbdcb1b87987787bd7f9fa17eefc2d2b","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1482161160000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1482161160000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1482161160000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1482161160000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1482161160000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"bef514826ebf9eb6e99bb2b0d72285106658a1ec","modified":1482161160000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1482161160000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1482161160000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1482161160000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1482161160000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1482161160000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1482161160000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1482161160000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1482161160000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1482161160000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1482161160000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1482161160000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1482161160000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1482161160000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1482161160000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1482161160000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1482161160000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1482161160000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1482161160000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1482161160000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1482161160000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1482161160000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1482161160000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1482161160000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1482161160000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1482161160000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1482161160000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1482161160000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7e899c4c0aa1312666f2534a4700667d1bfd88da","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1482161160000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1482161160000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1482161160000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1482161160000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1482161160000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1482161160000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1482161160000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1482161160000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1482161160000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1482161160000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1482161160000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1482161160000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1482161160000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1482161160000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1482161160000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1482161160000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1482161160000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1482161160000},{"_id":"public/atom.xml","hash":"819d8a61780aba62020ab788d305dbee38962389","modified":1484050597956},{"_id":"public/sitemap.xml","hash":"70b1315cb8da30127cd921c41c623bbc7f745ab2","modified":1484050597962},{"_id":"public/categories/index.html","hash":"edbc6bd967fff207b9f178f784953b7c0cbfcfbe","modified":1484050598044},{"_id":"public/tags/index.html","hash":"98ab8d42aad21ec20adc940a313c5696095c1d2f","modified":1484050598045},{"_id":"public/archives/index.html","hash":"48643fec4b42bc6ba0eb01d5f490b55f1bd47dfa","modified":1484050598045},{"_id":"public/archives/2017/index.html","hash":"4f54f96bdf873109fe80cd65133184cca96468ba","modified":1484050598045},{"_id":"public/archives/2017/01/index.html","hash":"3e1e82a85d5f71a73480695e6ce73fb82d40542d","modified":1484050598045},{"_id":"public/categories/JavaScript/index.html","hash":"36e30cf4211d4d9be9d7059af1fc370145d20b7f","modified":1484050598045},{"_id":"public/categories/GitHub/index.html","hash":"623a8ada8e45bdbd6fd31fc3b43f6159a5cdc4f7","modified":1484050598045},{"_id":"public/categories/JavaScript/HTML/index.html","hash":"18e3f21c39df575ce8598c69def3401883eb729d","modified":1484050598045},{"_id":"public/categories/GitHub/Hexo/index.html","hash":"6c0597a9e8037cec1ab21d40a6c184f8f3937d87","modified":1484050598045},{"_id":"public/tags/JavaScript/index.html","hash":"5132658e7aae6077b7e5fbd2aeac07c70fe73cd9","modified":1484050598045},{"_id":"public/tags/HTML/index.html","hash":"f20fb1b2edc651851415e89016136b6d85bfd61e","modified":1484050598045},{"_id":"public/tags/CSS/index.html","hash":"7f67a77b969026aa70a89c74b2c4a4fa79197519","modified":1484050598045},{"_id":"public/tags/博客/index.html","hash":"9a4519dbc2a938e646a3f0b9bed954daa343e1f2","modified":1484050598045},{"_id":"public/tags/GitHub-Pages/index.html","hash":"cb288632da46d3f3ffc2024f106d3a8cbc462d5b","modified":1484050598045},{"_id":"public/tags/Hexo/index.html","hash":"8981afe96d50a787b1a773e1d91a902c9814eb4a","modified":1484050598045},{"_id":"public/2017/01/02/GitHub Pages+Hexo搭建博客/index.html","hash":"a4d3e161d347ba6aff6b24a1590321407f1ab2af","modified":1484050598045},{"_id":"public/2017/01/02/Image Gallery/index.html","hash":"4789e8cf5c115cc7bbd0aa931f161f03530c0e55","modified":1484050598046},{"_id":"public/2017/01/02/Ajax常用写法/index.html","hash":"a8ba30caaf660155c9eca70cd5e6d922d655af01","modified":1484050598046},{"_id":"public/2017/01/01/jQuery常用方法/index.html","hash":"78cd5a0f34e0015fe49bf996f1dfb1a16c3892e3","modified":1484050598046},{"_id":"public/index.html","hash":"f9e3fc9bd547a74e70b1b779d90210b9b483d5c1","modified":1484050598046},{"_id":"public/tags/jQuery/index.html","hash":"1515aacd59713b7513dab571bdb9710735e9ee4d","modified":1484050598059},{"_id":"public/tags/Ajax/index.html","hash":"04aad096823ff14861cc8636e37ec216c4f7d727","modified":1484050598059},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1484050598059},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1484050598059},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1484050598059},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1484050598059},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1484050598059},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1484050598059},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1484050598059},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1484050598059},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1484050598059},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1484050598059},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1484050598059},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1484050598059},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1484050598060},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1484050598060},{"_id":"public/uploads/true.jpg","hash":"2da59952a921bba3796a1096529bcc1171fdb685","modified":1484050598060},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1484050598060},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1484050598060},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1484050598060},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1484050598060},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1484050598060},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1484050598060},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1484050598060},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1484050598060},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1484050598060},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1484050598060},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1484050598676},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1484050598686},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1484050598689},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1484050598689},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1484050598703},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1484050598703},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1484050598704},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1484050598704},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1484050598704},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1484050598704},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1484050598704},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1484050598704},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1484050598704},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1484050598704},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1484050598704},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1484050598704},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1484050598704},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1484050598704},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1484050598704},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1484050598704},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1484050598704},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1484050598704},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1484050598704},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1484050598704},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1484050598704},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1484050598704},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1484050598704},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1484050598704},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1484050598704},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1484050598705},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1484050598705},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1484050598705},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1484050598705},{"_id":"public/css/main.css","hash":"333be30e09670ca5d4820c523d5e6fa02d04b975","modified":1484050598705},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1484050598705},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1484050598705},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1484050598705},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1484050598705},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1484050598705},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1484050598705},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1484050598705},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1484050598705},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1484050598706},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1484050598706},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1484050598706},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1484050598725}],"Category":[{"name":"JavaScript","_id":"cixrheote0004m04s7rbfy0r8"},{"name":"GitHub","_id":"cixrheotr0008m04sp3cl1czc"},{"name":"HTML","parent":"cixrheote0004m04s7rbfy0r8","_id":"cixrheotw000dm04ssfyrt2he"},{"name":"Hexo","parent":"cixrheotr0008m04sp3cl1czc","_id":"cixrheou2000im04syiypm18r"}],"Data":[],"Page":[{"title":"分类","date":"2017-01-01T16:12:22.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-01-02 00:12:22\ntype: \"categories\"\n---\n","updated":"2017-01-01T16:13:13.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cixrheot70001m04sq7avukgo","content":"","excerpt":"","more":""},{"title":"标签","date":"2017-01-01T16:06:19.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-01-02 00:06:19\ntype: \"tags\"\n---\n","updated":"2017-01-01T16:08:36.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cixrheotb0003m04smursx0v8","content":"","excerpt":"","more":""}],"Post":[{"title":"Image Gallery","date":"2017-01-02T05:21:00.000Z","_content":"这是《JavaScript DOM编程艺术》第四章的一个Demo，包括HTML，JavaScript和CSS，以图片库来演示DOM操作。\n<!--more-->\n\n----\n## HTML\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">   \n    <script type=\"text/javascript\" src=\"gallery.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"gallery.css\"/>\n    <title>Image gallery</title>\n  </head>\n  <body>\n    <h1>SnapShots</h1>\n    <ul>\n      <li>\n        <a href=\"images/Emma Roberts.jpg\" \n           title=\"Emma Roberts\" \n           onclick=\"showPic(this);return false;\">Emma Roberts</a>\n      </li>\n      <li>\n        <a href=\"images/Emmy Rossum.jpg\" \n           title=\"Emmy Rossum\" \n           onclick=\"showPic(this);return false;\">Emmy Rossum</a>\n        </li>\n      <li>\n        <a href=\"images/Eva Green.jpg\" \n           title=\"Eva Green\" \n           onclick=\"showPic(this);return false;\">Eva Green</a>\n      </li>\n      <li>\n        <a href=\"images/Kaya Scodelario.jpg\" \n           title=\"Kaya Scodelario\" \n           onclick=\"showPic(this);return false;\">Kaya Scodelario</a>\n      </li>\n      <li>\n        <a href=\"images/Kiriko Takemura.jpg\" \n           title=\"Kiriko Takemura\" \n           onclick=\"showPic(this);return false;\">Kiriko Takemura</a>\n      </li>\n      <li>\n        <a href=\"images/Selena Gomez.jpg\" \n           title=\"Selena Gomez\" \n           onclick=\"showPic(this);return false;\">Selena Gomez</a>\n      </li>\n      <li>\n        <a href=\"images/Sophie Turner.jpg\" \n           title=\"Sophie Turner\" \n           onclick=\"showPic(this);return false;\">Sophie Turner</a>\n      </li>\n    </ul>\n    <img id=\"placeholder\" \n         src=\"images/startup.jpg\" \n         alt=\"My Image gallery\" width=\"30%\" height=\"20%\"/>\n    <p id=\"description\">Choose the actress you like.</p>\n  </body>\n</html>\n```\n\n----\n## JavaScript\n```javascript \nfunction showPic(whichPic){\n    debugger;\n    var imageSource = whichPic.getAttribute('href');\n    var placeholder = document.getElementById('placeholder');\n    placeholder.setAttribute('src',imageSource);\n    var text = whichPic.getAttribute('title');\n    var description = document.getElementById('description');\n    description.firstChild.nodeValue = text;\n}\n```\n\n----\n## CSS\n```css\nbody{\n    font-family: Helvetica, Arial, sans-serif;\n    color: #333;\n    background-color: #ccc;\n    margin: 1em 10%;\n}\nh1{\n    color: #333;\n    background-color: transparent;\n}\np{\n   font-family: Helvetica, Arial, sans-serif; \n   color: #c60;\n   font-weight: bold;\n}\na{\n    color: #c60;\n    background-color: transparent;\n    font-weight: bold;\n    text-decoration: none;\n}\nul{\n    padding: 0;\n}\nli{\n    float: left;\n    padding: 1em;\n    list-style: none;\n}\nimg{\n    display: block;\n    clear: both;\n}\n```\n\n----\n## GitHub\n[Image Gallery](https://github.com/Cheng-Chao/Image-Gallery)","source":"_posts/Image Gallery.md","raw":"title: Image Gallery\ndate: 2017/1/2 13:21\ncategories:\n- JavaScript\n- HTML\ntags:\n- JavaScript\n- HTML\n- CSS\n---\n这是《JavaScript DOM编程艺术》第四章的一个Demo，包括HTML，JavaScript和CSS，以图片库来演示DOM操作。\n<!--more-->\n\n----\n## HTML\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">   \n    <script type=\"text/javascript\" src=\"gallery.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"gallery.css\"/>\n    <title>Image gallery</title>\n  </head>\n  <body>\n    <h1>SnapShots</h1>\n    <ul>\n      <li>\n        <a href=\"images/Emma Roberts.jpg\" \n           title=\"Emma Roberts\" \n           onclick=\"showPic(this);return false;\">Emma Roberts</a>\n      </li>\n      <li>\n        <a href=\"images/Emmy Rossum.jpg\" \n           title=\"Emmy Rossum\" \n           onclick=\"showPic(this);return false;\">Emmy Rossum</a>\n        </li>\n      <li>\n        <a href=\"images/Eva Green.jpg\" \n           title=\"Eva Green\" \n           onclick=\"showPic(this);return false;\">Eva Green</a>\n      </li>\n      <li>\n        <a href=\"images/Kaya Scodelario.jpg\" \n           title=\"Kaya Scodelario\" \n           onclick=\"showPic(this);return false;\">Kaya Scodelario</a>\n      </li>\n      <li>\n        <a href=\"images/Kiriko Takemura.jpg\" \n           title=\"Kiriko Takemura\" \n           onclick=\"showPic(this);return false;\">Kiriko Takemura</a>\n      </li>\n      <li>\n        <a href=\"images/Selena Gomez.jpg\" \n           title=\"Selena Gomez\" \n           onclick=\"showPic(this);return false;\">Selena Gomez</a>\n      </li>\n      <li>\n        <a href=\"images/Sophie Turner.jpg\" \n           title=\"Sophie Turner\" \n           onclick=\"showPic(this);return false;\">Sophie Turner</a>\n      </li>\n    </ul>\n    <img id=\"placeholder\" \n         src=\"images/startup.jpg\" \n         alt=\"My Image gallery\" width=\"30%\" height=\"20%\"/>\n    <p id=\"description\">Choose the actress you like.</p>\n  </body>\n</html>\n```\n\n----\n## JavaScript\n```javascript \nfunction showPic(whichPic){\n    debugger;\n    var imageSource = whichPic.getAttribute('href');\n    var placeholder = document.getElementById('placeholder');\n    placeholder.setAttribute('src',imageSource);\n    var text = whichPic.getAttribute('title');\n    var description = document.getElementById('description');\n    description.firstChild.nodeValue = text;\n}\n```\n\n----\n## CSS\n```css\nbody{\n    font-family: Helvetica, Arial, sans-serif;\n    color: #333;\n    background-color: #ccc;\n    margin: 1em 10%;\n}\nh1{\n    color: #333;\n    background-color: transparent;\n}\np{\n   font-family: Helvetica, Arial, sans-serif; \n   color: #c60;\n   font-weight: bold;\n}\na{\n    color: #c60;\n    background-color: transparent;\n    font-weight: bold;\n    text-decoration: none;\n}\nul{\n    padding: 0;\n}\nli{\n    float: left;\n    padding: 1em;\n    list-style: none;\n}\nimg{\n    display: block;\n    clear: both;\n}\n```\n\n----\n## GitHub\n[Image Gallery](https://github.com/Cheng-Chao/Image-Gallery)","slug":"Image Gallery","published":1,"updated":"2017-01-02T13:27:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixrheot10000m04sxwnroam8","content":"<p>这是《JavaScript DOM编程艺术》第四章的一个Demo，包括HTML，JavaScript和CSS，以图片库来演示DOM操作。<br><a id=\"more\"></a></p>\n<hr>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span>   </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"gallery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"gallery.css\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Image gallery<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>SnapShots<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Emma Roberts.jpg\"</span> </span></div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Emma Roberts\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;Emma Roberts<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Emmy Rossum.jpg\"</span> </span></div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Emmy Rossum\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;Emmy Rossum<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Eva Green.jpg\"</span> </span></div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Eva Green\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;Eva Green<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Kaya Scodelario.jpg\"</span> </span></div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Kaya Scodelario\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;Kaya Scodelario<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Kiriko Takemura.jpg\"</span> </span></div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Kiriko Takemura\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;Kiriko Takemura<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Selena Gomez.jpg\"</span> </span></div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Selena Gomez\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;Selena Gomez<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Sophie Turner.jpg\"</span> </span></div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Sophie Turner\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;Sophie Turner<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"placeholder\"</span> </span></div><div class=\"line\">         <span class=\"attr\">src</span>=<span class=\"string\">\"images/startup.jpg\"</span> </div><div class=\"line\">         <span class=\"attr\">alt</span>=<span class=\"string\">\"My Image gallery\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"30%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"20%\"</span>/&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"description\"</span>&gt;</span>Choose the actress you like.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showPic</span>(<span class=\"params\">whichPic</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">debugger</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> imageSource = whichPic.getAttribute(<span class=\"string\">'href'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> placeholder = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'placeholder'</span>);</div><div class=\"line\">    placeholder.setAttribute(<span class=\"string\">'src'</span>,imageSource);</div><div class=\"line\">    <span class=\"keyword\">var</span> text = whichPic.getAttribute(<span class=\"string\">'title'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> description = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'description'</span>);</div><div class=\"line\">    description.firstChild.nodeValue = text;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: Helvetica, Arial, sans-serif;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">1em</span> <span class=\"number\">10%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">h1</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">p</span>&#123;</div><div class=\"line\">   <span class=\"attribute\">font-family</span>: Helvetica, Arial, sans-serif; </div><div class=\"line\">   <span class=\"attribute\">color</span>: <span class=\"number\">#c60</span>;</div><div class=\"line\">   <span class=\"attribute\">font-weight</span>: bold;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#c60</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: transparent;</div><div class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">ul</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</div><div class=\"line\">    <span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">img</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: block;</div><div class=\"line\">    <span class=\"attribute\">clear</span>: both;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><p><a href=\"https://github.com/Cheng-Chao/Image-Gallery\" target=\"_blank\" rel=\"external\">Image Gallery</a></p>\n","excerpt":"<p>这是《JavaScript DOM编程艺术》第四章的一个Demo，包括HTML，JavaScript和CSS，以图片库来演示DOM操作。<br>","more":"</p>\n<hr>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span>   </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"gallery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"gallery.css\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Image gallery<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>SnapShots<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Emma Roberts.jpg\"</span> </div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Emma Roberts\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;</span>Emma Roberts<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Emmy Rossum.jpg\"</span> </div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Emmy Rossum\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;</span>Emmy Rossum<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Eva Green.jpg\"</span> </div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Eva Green\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;</span>Eva Green<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Kaya Scodelario.jpg\"</span> </div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Kaya Scodelario\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;</span>Kaya Scodelario<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Kiriko Takemura.jpg\"</span> </div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Kiriko Takemura\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;</span>Kiriko Takemura<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Selena Gomez.jpg\"</span> </div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Selena Gomez\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;</span>Selena Gomez<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"images/Sophie Turner.jpg\"</span> </div><div class=\"line\">           <span class=\"attr\">title</span>=<span class=\"string\">\"Sophie Turner\"</span> </div><div class=\"line\">           <span class=\"attr\">onclick</span>=<span class=\"string\">\"showPic(this);return false;\"</span>&gt;</span>Sophie Turner<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"placeholder\"</span> </div><div class=\"line\">         <span class=\"attr\">src</span>=<span class=\"string\">\"images/startup.jpg\"</span> </div><div class=\"line\">         <span class=\"attr\">alt</span>=<span class=\"string\">\"My Image gallery\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"30%\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"20%\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"description\"</span>&gt;</span>Choose the actress you like.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showPic</span>(<span class=\"params\">whichPic</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">debugger</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> imageSource = whichPic.getAttribute(<span class=\"string\">'href'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> placeholder = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'placeholder'</span>);</div><div class=\"line\">    placeholder.setAttribute(<span class=\"string\">'src'</span>,imageSource);</div><div class=\"line\">    <span class=\"keyword\">var</span> text = whichPic.getAttribute(<span class=\"string\">'title'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> description = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'description'</span>);</div><div class=\"line\">    description.firstChild.nodeValue = text;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: Helvetica, Arial, sans-serif;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">1em</span> <span class=\"number\">10%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">h1</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">p</span>&#123;</div><div class=\"line\">   <span class=\"attribute\">font-family</span>: Helvetica, Arial, sans-serif; </div><div class=\"line\">   <span class=\"attribute\">color</span>: <span class=\"number\">#c60</span>;</div><div class=\"line\">   <span class=\"attribute\">font-weight</span>: bold;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#c60</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: transparent;</div><div class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">ul</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</div><div class=\"line\">    <span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">img</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: block;</div><div class=\"line\">    <span class=\"attribute\">clear</span>: both;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><p><a href=\"https://github.com/Cheng-Chao/Image-Gallery\">Image Gallery</a></p>"},{"title":"GitHub Pages+Hexo搭建博客","date":"2017-01-02T12:20:00.000Z","_content":"Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在Github和Heroku上；GitHub Pages 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定，可以用于介绍托管在Github上的Project或者搭建网站。本文为一个简易的教程。\n<!--more-->\n\n----\n## 前置条件\n### 安装Node\n**Hexo**是基于**Node**的，所以首先的安装Node.js，去官网去下载一个安装包就好[Node.js](https://nodejs.org/en/)。如果你还没有安装过**Git**，推荐你安装一个[Git](https://msysgit.github.io)。安装好之后打开**Git Bash**，使用以下命令就可以查看**Node**是否装好。\n```shell\n$ node -v\nv6.9.2\n```\n**Node**的一个提高效率的工具就是**npm**，全称是**Node Package Manager**  ，是一个**Node.js**包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。如果你熟悉Ruby的gem，Python的pypi、setuptools，PHP的pear，那么你就知道NPM的作用是什么了。**Git Bash**，使用以下命令就可以查看**npm**的版本。在刚刚安装**node**的时候，**npm**已经装好了。\n```shell\n$ npm -v\n3.10.9\n```\n接下了你就可以使用**npm install**来安装基于**node**的第三方包了，和**\\*nix**系统的命令行工具类似。但是由于国内的网络环境，建议将**node**的安装源设为阿里的同步镜像源。\n```shell\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n然后就可以使用**cnpm install [name]**来安装模块了，速度快很多。\n### 安装Hexo\n配置好**Node.JS**后，打开**Git Bash**的命令工具输入以下命令:\n```shell\ncnpm install hexo-cli -g\ncnpm install hexo --save\n```\n\n----\n## 配置本地Hexo博客\n### 初始化本地目录\n随便新建个文件夹列如（D:\\hexo-demo），使用**Git Bash**的命令工具进入该路径下，执行以下命令:\n```shell\nhexo init\n\n#新建完成后，指定文件夹的目录如下\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── scripts\n├── source\n|      └──posts\n└── themes\n```\n### 安装Hexo插件\n在本地博客根目录下使用**Git Bash**的命令工具执行以下命令:\n```shell\ncnpm install hexo-generator-index --save\ncnpm install hexo-generator-archive --save\ncnpm install hexo-generator-category --save\ncnpm install hexo-generator-tag --save\ncnpm install hexo-server --save\ncnpm install hexo-deployer-git --save\ncnpm install hexo-deployer-heroku --save\ncnpm install hexo-deployer-rsync --save\ncnpm install hexo-deployer-openshift --save\ncnpm install hexo-renderer-marked@0.2 --save\ncnpm install hexo-renderer-stylus@0.2 --save\ncnpm install hexo-generator-feed@1 --save\ncnpm install hexo-generator-sitemap@1 --save\n```\n### 本地配置\n初始的时候可以见到配置下。\n```yml\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n# Site 站点配置\ntitle: Hexo-demo #网站标题\nsubtitle: hexo is simple and easy to study #网站副标题\ndescription: this is hexo-demo #网栈描述\nauthor: pomy #你的名字\nlanguage: zh-CN #网站使用的语言\ntimezone: Asia/Shanghai #网站时区\n# URL #可以不用配置\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com #网址，搜索时会在搜索引擎中显示\nroot: / #网站根目录\npermalink: :year/:month/:day/:title/ #永久链接格式\npermalink_defaults: #永久链接中各部分的默认值\n# Directory 目录配置\nsource_dir: source #资源文件夹，这个文件夹用来存放内容\npublic_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件\ntag_dir: tags #标签文件夹\narchive_dir: archives #归档文件夹\ncategory_dir: categories #分类文件夹\ncode_dir: downloads/code #Include code 文件夹\ni18n_dir: :lang #国际化文件夹\nskip_render: #跳过指定文件的渲染，您可使用 glob 来配置路径\n# Writing 写作配置\nnew_post_name: :title.md # 新文章的文件名称\ndefault_layout: post #默认布局\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0 #把文件名称转换为 (1) 小写或 (2) 大写\nrender_drafts: false #显示草稿\npost_asset_folder: false #是否启动资源文件夹\nrelative_link: false #把链接改为与根目录的相对位址\nfuture: true\nhighlight: #代码块的设置\nenable: true\nline_number: true\nauto_detect: true\ntab_replace:\n# Category & Tag 分类 & 标签\ndefault_category: uncategorized #默认分类\ncategory_map: #分类别名\ntag_map: #标签别名\n# Date / Time format 时间和日期\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n# Pagination 分页\n## Set per_page to 0 to disable pagination\nper_page: 10 #每页显示的文章量 (0 = 关闭分页功能)\npagination_dir: page #分页目录\n# Extensions 扩展\n## Plugins: http://hexo.io/plugins/ 插件\n## Themes: http://hexo.io/themes/ 主题\ntheme: landscape #当前主题名称\n# Deployment #部署到github\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\ntype:\n```\n### 本地查看效果\n继续执行以下命令，成功后可在浏览器输入localhost:4000查看效果。\n```shell\nhexo server\n//the same as\nhexo s\n```\n如果配置成功，即可在浏览器中看到**hexo**初始默认的**hello world**博文。\n\n----\n## 部署到GitHub\n### 新建repo\n在GitHub新建一个repo，名字为**github-user-name.github.io**，这是**GitHub Pages**的默认域名。然后使用**git clone**将repo下到本地。\n### 静态文件\n在本地博客根目录下使用**Git Bash**的命令工具执行以下命令:\n```shell\nhexo generate\n//the same as\nhexo g\n```\n然后会在根目录下生成一个**public**文件夹，里面为博客对应的静态网页文件。将**public**文件夹下的所有文件/文件夹拷到刚刚新建repo的本地目录下，然后将所有内容**publish**到**GitHub**。然后就可以使用**https://github-user-name.github.io**就可以访问博客了，到这里博客就搭建完成了。\n\n----\n## 博客优化\n### 主题\n**hexo**博客有很多主题，如果喜欢折腾，可以将博客整得很好看，这里推荐使用**NexT**，也是我正在用的主题。其**GitHub**主页上面有很详细的说明。  \n[hexo](https://github.com/hexojs/hexo)\n[使用文档](http://theme-next.iissnan.com/getting-started.html)        \n","source":"_posts/GitHub Pages+Hexo搭建博客.md","raw":"title: GitHub Pages+Hexo搭建博客\ndate: 2017/1/2 20:20\ncategories:\n- GitHub\n- Hexo\ntags:\n- 博客\n- GitHub Pages\n- Hexo\n---\nHexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在Github和Heroku上；GitHub Pages 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定，可以用于介绍托管在Github上的Project或者搭建网站。本文为一个简易的教程。\n<!--more-->\n\n----\n## 前置条件\n### 安装Node\n**Hexo**是基于**Node**的，所以首先的安装Node.js，去官网去下载一个安装包就好[Node.js](https://nodejs.org/en/)。如果你还没有安装过**Git**，推荐你安装一个[Git](https://msysgit.github.io)。安装好之后打开**Git Bash**，使用以下命令就可以查看**Node**是否装好。\n```shell\n$ node -v\nv6.9.2\n```\n**Node**的一个提高效率的工具就是**npm**，全称是**Node Package Manager**  ，是一个**Node.js**包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。如果你熟悉Ruby的gem，Python的pypi、setuptools，PHP的pear，那么你就知道NPM的作用是什么了。**Git Bash**，使用以下命令就可以查看**npm**的版本。在刚刚安装**node**的时候，**npm**已经装好了。\n```shell\n$ npm -v\n3.10.9\n```\n接下了你就可以使用**npm install**来安装基于**node**的第三方包了，和**\\*nix**系统的命令行工具类似。但是由于国内的网络环境，建议将**node**的安装源设为阿里的同步镜像源。\n```shell\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n然后就可以使用**cnpm install [name]**来安装模块了，速度快很多。\n### 安装Hexo\n配置好**Node.JS**后，打开**Git Bash**的命令工具输入以下命令:\n```shell\ncnpm install hexo-cli -g\ncnpm install hexo --save\n```\n\n----\n## 配置本地Hexo博客\n### 初始化本地目录\n随便新建个文件夹列如（D:\\hexo-demo），使用**Git Bash**的命令工具进入该路径下，执行以下命令:\n```shell\nhexo init\n\n#新建完成后，指定文件夹的目录如下\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── scripts\n├── source\n|      └──posts\n└── themes\n```\n### 安装Hexo插件\n在本地博客根目录下使用**Git Bash**的命令工具执行以下命令:\n```shell\ncnpm install hexo-generator-index --save\ncnpm install hexo-generator-archive --save\ncnpm install hexo-generator-category --save\ncnpm install hexo-generator-tag --save\ncnpm install hexo-server --save\ncnpm install hexo-deployer-git --save\ncnpm install hexo-deployer-heroku --save\ncnpm install hexo-deployer-rsync --save\ncnpm install hexo-deployer-openshift --save\ncnpm install hexo-renderer-marked@0.2 --save\ncnpm install hexo-renderer-stylus@0.2 --save\ncnpm install hexo-generator-feed@1 --save\ncnpm install hexo-generator-sitemap@1 --save\n```\n### 本地配置\n初始的时候可以见到配置下。\n```yml\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n# Site 站点配置\ntitle: Hexo-demo #网站标题\nsubtitle: hexo is simple and easy to study #网站副标题\ndescription: this is hexo-demo #网栈描述\nauthor: pomy #你的名字\nlanguage: zh-CN #网站使用的语言\ntimezone: Asia/Shanghai #网站时区\n# URL #可以不用配置\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com #网址，搜索时会在搜索引擎中显示\nroot: / #网站根目录\npermalink: :year/:month/:day/:title/ #永久链接格式\npermalink_defaults: #永久链接中各部分的默认值\n# Directory 目录配置\nsource_dir: source #资源文件夹，这个文件夹用来存放内容\npublic_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件\ntag_dir: tags #标签文件夹\narchive_dir: archives #归档文件夹\ncategory_dir: categories #分类文件夹\ncode_dir: downloads/code #Include code 文件夹\ni18n_dir: :lang #国际化文件夹\nskip_render: #跳过指定文件的渲染，您可使用 glob 来配置路径\n# Writing 写作配置\nnew_post_name: :title.md # 新文章的文件名称\ndefault_layout: post #默认布局\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0 #把文件名称转换为 (1) 小写或 (2) 大写\nrender_drafts: false #显示草稿\npost_asset_folder: false #是否启动资源文件夹\nrelative_link: false #把链接改为与根目录的相对位址\nfuture: true\nhighlight: #代码块的设置\nenable: true\nline_number: true\nauto_detect: true\ntab_replace:\n# Category & Tag 分类 & 标签\ndefault_category: uncategorized #默认分类\ncategory_map: #分类别名\ntag_map: #标签别名\n# Date / Time format 时间和日期\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n# Pagination 分页\n## Set per_page to 0 to disable pagination\nper_page: 10 #每页显示的文章量 (0 = 关闭分页功能)\npagination_dir: page #分页目录\n# Extensions 扩展\n## Plugins: http://hexo.io/plugins/ 插件\n## Themes: http://hexo.io/themes/ 主题\ntheme: landscape #当前主题名称\n# Deployment #部署到github\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\ntype:\n```\n### 本地查看效果\n继续执行以下命令，成功后可在浏览器输入localhost:4000查看效果。\n```shell\nhexo server\n//the same as\nhexo s\n```\n如果配置成功，即可在浏览器中看到**hexo**初始默认的**hello world**博文。\n\n----\n## 部署到GitHub\n### 新建repo\n在GitHub新建一个repo，名字为**github-user-name.github.io**，这是**GitHub Pages**的默认域名。然后使用**git clone**将repo下到本地。\n### 静态文件\n在本地博客根目录下使用**Git Bash**的命令工具执行以下命令:\n```shell\nhexo generate\n//the same as\nhexo g\n```\n然后会在根目录下生成一个**public**文件夹，里面为博客对应的静态网页文件。将**public**文件夹下的所有文件/文件夹拷到刚刚新建repo的本地目录下，然后将所有内容**publish**到**GitHub**。然后就可以使用**https://github-user-name.github.io**就可以访问博客了，到这里博客就搭建完成了。\n\n----\n## 博客优化\n### 主题\n**hexo**博客有很多主题，如果喜欢折腾，可以将博客整得很好看，这里推荐使用**NexT**，也是我正在用的主题。其**GitHub**主页上面有很详细的说明。  \n[hexo](https://github.com/hexojs/hexo)\n[使用文档](http://theme-next.iissnan.com/getting-started.html)        \n","slug":"GitHub Pages+Hexo搭建博客","published":1,"updated":"2017-01-08T12:54:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixrheot80002m04smtyiz4wa","content":"<p>Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在Github和Heroku上；GitHub Pages 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定，可以用于介绍托管在Github上的Project或者搭建网站。本文为一个简易的教程。<br><a id=\"more\"></a></p>\n<hr>\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><h3 id=\"安装Node\"><a href=\"#安装Node\" class=\"headerlink\" title=\"安装Node\"></a>安装Node</h3><p><strong>Hexo</strong>是基于<strong>Node</strong>的，所以首先的安装Node.js，去官网去下载一个安装包就好<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a>。如果你还没有安装过<strong>Git</strong>，推荐你安装一个<a href=\"https://msysgit.github.io\" target=\"_blank\" rel=\"external\">Git</a>。安装好之后打开<strong>Git Bash</strong>，使用以下命令就可以查看<strong>Node</strong>是否装好。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node -v</div><div class=\"line\">v6.9.2</div></pre></td></tr></table></figure></p>\n<p><strong>Node</strong>的一个提高效率的工具就是<strong>npm</strong>，全称是<strong>Node Package Manager</strong>  ，是一个<strong>Node.js</strong>包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。如果你熟悉Ruby的gem，Python的pypi、setuptools，PHP的pear，那么你就知道NPM的作用是什么了。<strong>Git Bash</strong>，使用以下命令就可以查看<strong>npm</strong>的版本。在刚刚安装<strong>node</strong>的时候，<strong>npm</strong>已经装好了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm -v</div><div class=\"line\">3.10.9</div></pre></td></tr></table></figure></p>\n<p>接下了你就可以使用<strong>npm install</strong>来安装基于<strong>node</strong>的第三方包了，和<strong>*nix</strong>系统的命令行工具类似。但是由于国内的网络环境，建议将<strong>node</strong>的安装源设为阿里的同步镜像源。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>\n<p>然后就可以使用<strong>cnpm install [name]</strong>来安装模块了，速度快很多。</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>配置好<strong>Node.JS</strong>后，打开<strong>Git Bash</strong>的命令工具输入以下命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm install hexo-cli -g</div><div class=\"line\">cnpm install hexo --save</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"配置本地Hexo博客\"><a href=\"#配置本地Hexo博客\" class=\"headerlink\" title=\"配置本地Hexo博客\"></a>配置本地Hexo博客</h2><h3 id=\"初始化本地目录\"><a href=\"#初始化本地目录\" class=\"headerlink\" title=\"初始化本地目录\"></a>初始化本地目录</h3><p>随便新建个文件夹列如（D:\\hexo-demo），使用<strong>Git Bash</strong>的命令工具进入该路径下，执行以下命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div><div class=\"line\"></div><div class=\"line\">#新建完成后，指定文件夹的目录如下</div><div class=\"line\">.</div><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── scripts</div><div class=\"line\">├── source</div><div class=\"line\">|      └──posts</div><div class=\"line\">└── themes</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装Hexo插件\"><a href=\"#安装Hexo插件\" class=\"headerlink\" title=\"安装Hexo插件\"></a>安装Hexo插件</h3><p>在本地博客根目录下使用<strong>Git Bash</strong>的命令工具执行以下命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm install hexo-generator-index --save</div><div class=\"line\">cnpm install hexo-generator-archive --save</div><div class=\"line\">cnpm install hexo-generator-category --save</div><div class=\"line\">cnpm install hexo-generator-tag --save</div><div class=\"line\">cnpm install hexo-server --save</div><div class=\"line\">cnpm install hexo-deployer-git --save</div><div class=\"line\">cnpm install hexo-deployer-heroku --save</div><div class=\"line\">cnpm install hexo-deployer-rsync --save</div><div class=\"line\">cnpm install hexo-deployer-openshift --save</div><div class=\"line\">cnpm install hexo-renderer-marked@0.2 --save</div><div class=\"line\">cnpm install hexo-renderer-stylus@0.2 --save</div><div class=\"line\">cnpm install hexo-generator-feed@1 --save</div><div class=\"line\">cnpm install hexo-generator-sitemap@1 --save</div></pre></td></tr></table></figure></p>\n<h3 id=\"本地配置\"><a href=\"#本地配置\" class=\"headerlink\" title=\"本地配置\"></a>本地配置</h3><p>初始的时候可以见到配置下。<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Hexo Configuration</span></div><div class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/configuration.html</span></div><div class=\"line\"><span class=\"comment\">## Source: https://github.com/hexojs/hexo/</span></div><div class=\"line\"><span class=\"comment\"># Site 站点配置</span></div><div class=\"line\"><span class=\"attr\">title:</span> Hexo-demo <span class=\"comment\">#网站标题</span></div><div class=\"line\"><span class=\"attr\">subtitle:</span> hexo is simple and easy to study <span class=\"comment\">#网站副标题</span></div><div class=\"line\"><span class=\"attr\">description:</span> this is hexo-demo <span class=\"comment\">#网栈描述</span></div><div class=\"line\"><span class=\"attr\">author:</span> pomy <span class=\"comment\">#你的名字</span></div><div class=\"line\"><span class=\"attr\">language:</span> zh-CN <span class=\"comment\">#网站使用的语言</span></div><div class=\"line\"><span class=\"attr\">timezone:</span> Asia/Shanghai <span class=\"comment\">#网站时区</span></div><div class=\"line\"><span class=\"comment\"># URL #可以不用配置</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"attr\">url:</span> http://yoursite.com <span class=\"comment\">#网址，搜索时会在搜索引擎中显示</span></div><div class=\"line\"><span class=\"attr\">root:</span> / <span class=\"comment\">#网站根目录</span></div><div class=\"line\"><span class=\"attr\">permalink:</span> :year/:month/:day/:title/ <span class=\"comment\">#永久链接格式</span></div><div class=\"line\"><span class=\"attr\">permalink_defaults:</span> <span class=\"comment\">#永久链接中各部分的默认值</span></div><div class=\"line\"><span class=\"comment\"># Directory 目录配置</span></div><div class=\"line\"><span class=\"attr\">source_dir:</span> source <span class=\"comment\">#资源文件夹，这个文件夹用来存放内容</span></div><div class=\"line\"><span class=\"attr\">public_dir:</span> public <span class=\"comment\">#公共文件夹，这个文件夹用于存放生成的站点文件</span></div><div class=\"line\"><span class=\"attr\">tag_dir:</span> tags <span class=\"comment\">#标签文件夹</span></div><div class=\"line\"><span class=\"attr\">archive_dir:</span> archives <span class=\"comment\">#归档文件夹</span></div><div class=\"line\"><span class=\"attr\">category_dir:</span> categories <span class=\"comment\">#分类文件夹</span></div><div class=\"line\"><span class=\"attr\">code_dir:</span> downloads/code <span class=\"comment\">#Include code 文件夹</span></div><div class=\"line\"><span class=\"attr\">i18n_dir:</span> :lang <span class=\"comment\">#国际化文件夹</span></div><div class=\"line\"><span class=\"attr\">skip_render:</span> <span class=\"comment\">#跳过指定文件的渲染，您可使用 glob 来配置路径</span></div><div class=\"line\"><span class=\"comment\"># Writing 写作配置</span></div><div class=\"line\"><span class=\"attr\">new_post_name:</span> :title.md <span class=\"comment\"># 新文章的文件名称</span></div><div class=\"line\"><span class=\"attr\">default_layout:</span> post <span class=\"comment\">#默认布局</span></div><div class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></div><div class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></div><div class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span> <span class=\"comment\">#把文件名称转换为 (1) 小写或 (2) 大写</span></div><div class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span> <span class=\"comment\">#显示草稿</span></div><div class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">false</span> <span class=\"comment\">#是否启动资源文件夹</span></div><div class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span> <span class=\"comment\">#把链接改为与根目录的相对位址</span></div><div class=\"line\"><span class=\"attr\">future:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">highlight:</span> <span class=\"comment\">#代码块的设置</span></div><div class=\"line\"><span class=\"attr\">enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">auto_detect:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">tab_replace:</span></div><div class=\"line\"><span class=\"comment\"># Category &amp; Tag 分类 &amp; 标签</span></div><div class=\"line\"><span class=\"attr\">default_category:</span> uncategorized <span class=\"comment\">#默认分类</span></div><div class=\"line\"><span class=\"attr\">category_map:</span> <span class=\"comment\">#分类别名</span></div><div class=\"line\"><span class=\"attr\">tag_map:</span> <span class=\"comment\">#标签别名</span></div><div class=\"line\"><span class=\"comment\"># Date / Time format 时间和日期</span></div><div class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></div><div class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></div><div class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></div><div class=\"line\"><span class=\"attr\">date_format:</span> YYYY-MM-DD</div><div class=\"line\"><span class=\"attr\">time_format:</span> HH:mm:ss</div><div class=\"line\"><span class=\"comment\"># Pagination 分页</span></div><div class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></div><div class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">10</span> <span class=\"comment\">#每页显示的文章量 (0 = 关闭分页功能)</span></div><div class=\"line\"><span class=\"attr\">pagination_dir:</span> page <span class=\"comment\">#分页目录</span></div><div class=\"line\"><span class=\"comment\"># Extensions 扩展</span></div><div class=\"line\"><span class=\"comment\">## Plugins: http://hexo.io/plugins/ 插件</span></div><div class=\"line\"><span class=\"comment\">## Themes: http://hexo.io/themes/ 主题</span></div><div class=\"line\"><span class=\"attr\">theme:</span> landscape <span class=\"comment\">#当前主题名称</span></div><div class=\"line\"><span class=\"comment\"># Deployment #部署到github</span></div><div class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">type:</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"本地查看效果\"><a href=\"#本地查看效果\" class=\"headerlink\" title=\"本地查看效果\"></a>本地查看效果</h3><p>继续执行以下命令，成功后可在浏览器输入localhost:4000查看效果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div><div class=\"line\">//the same as</div><div class=\"line\">hexo s</div></pre></td></tr></table></figure></p>\n<p>如果配置成功，即可在浏览器中看到<strong>hexo</strong>初始默认的<strong>hello world</strong>博文。</p>\n<hr>\n<h2 id=\"部署到GitHub\"><a href=\"#部署到GitHub\" class=\"headerlink\" title=\"部署到GitHub\"></a>部署到GitHub</h2><h3 id=\"新建repo\"><a href=\"#新建repo\" class=\"headerlink\" title=\"新建repo\"></a>新建repo</h3><p>在GitHub新建一个repo，名字为<strong>github-user-name.github.io</strong>，这是<strong>GitHub Pages</strong>的默认域名。然后使用<strong>git clone</strong>将repo下到本地。</p>\n<h3 id=\"静态文件\"><a href=\"#静态文件\" class=\"headerlink\" title=\"静态文件\"></a>静态文件</h3><p>在本地博客根目录下使用<strong>Git Bash</strong>的命令工具执行以下命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div><div class=\"line\">//the same as</div><div class=\"line\">hexo g</div></pre></td></tr></table></figure></p>\n<p>然后会在根目录下生成一个<strong>public</strong>文件夹，里面为博客对应的静态网页文件。将<strong>public</strong>文件夹下的所有文件/文件夹拷到刚刚新建repo的本地目录下，然后将所有内容<strong>publish</strong>到<strong>GitHub</strong>。然后就可以使用<strong><a href=\"https://github-user-name.github.io\" target=\"_blank\" rel=\"external\">https://github-user-name.github.io</a></strong>就可以访问博客了，到这里博客就搭建完成了。</p>\n<hr>\n<h2 id=\"博客优化\"><a href=\"#博客优化\" class=\"headerlink\" title=\"博客优化\"></a>博客优化</h2><h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><p><strong>hexo</strong>博客有很多主题，如果喜欢折腾，可以将博客整得很好看，这里推荐使用<strong>NexT</strong>，也是我正在用的主题。其<strong>GitHub</strong>主页上面有很详细的说明。<br><a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"external\">hexo</a><br><a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">使用文档</a>        </p>\n","excerpt":"<p>Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在Github和Heroku上；GitHub Pages 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定，可以用于介绍托管在Github上的Project或者搭建网站。本文为一个简易的教程。<br>","more":"</p>\n<hr>\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><h3 id=\"安装Node\"><a href=\"#安装Node\" class=\"headerlink\" title=\"安装Node\"></a>安装Node</h3><p><strong>Hexo</strong>是基于<strong>Node</strong>的，所以首先的安装Node.js，去官网去下载一个安装包就好<a href=\"https://nodejs.org/en/\">Node.js</a>。如果你还没有安装过<strong>Git</strong>，推荐你安装一个<a href=\"https://msysgit.github.io\">Git</a>。安装好之后打开<strong>Git Bash</strong>，使用以下命令就可以查看<strong>Node</strong>是否装好。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node -v</div><div class=\"line\">v6.9.2</div></pre></td></tr></table></figure></p>\n<p><strong>Node</strong>的一个提高效率的工具就是<strong>npm</strong>，全称是<strong>Node Package Manager</strong>  ，是一个<strong>Node.js</strong>包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。如果你熟悉Ruby的gem，Python的pypi、setuptools，PHP的pear，那么你就知道NPM的作用是什么了。<strong>Git Bash</strong>，使用以下命令就可以查看<strong>npm</strong>的版本。在刚刚安装<strong>node</strong>的时候，<strong>npm</strong>已经装好了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm -v</div><div class=\"line\">3.10.9</div></pre></td></tr></table></figure></p>\n<p>接下了你就可以使用<strong>npm install</strong>来安装基于<strong>node</strong>的第三方包了，和<strong>*nix</strong>系统的命令行工具类似。但是由于国内的网络环境，建议将<strong>node</strong>的安装源设为阿里的同步镜像源。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>\n<p>然后就可以使用<strong>cnpm install [name]</strong>来安装模块了，速度快很多。</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>配置好<strong>Node.JS</strong>后，打开<strong>Git Bash</strong>的命令工具输入以下命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm install hexo-cli -g</div><div class=\"line\">cnpm install hexo --save</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"配置本地Hexo博客\"><a href=\"#配置本地Hexo博客\" class=\"headerlink\" title=\"配置本地Hexo博客\"></a>配置本地Hexo博客</h2><h3 id=\"初始化本地目录\"><a href=\"#初始化本地目录\" class=\"headerlink\" title=\"初始化本地目录\"></a>初始化本地目录</h3><p>随便新建个文件夹列如（D:\\hexo-demo），使用<strong>Git Bash</strong>的命令工具进入该路径下，执行以下命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div><div class=\"line\"></div><div class=\"line\">#新建完成后，指定文件夹的目录如下</div><div class=\"line\">.</div><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── scripts</div><div class=\"line\">├── source</div><div class=\"line\">|      └──posts</div><div class=\"line\">└── themes</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装Hexo插件\"><a href=\"#安装Hexo插件\" class=\"headerlink\" title=\"安装Hexo插件\"></a>安装Hexo插件</h3><p>在本地博客根目录下使用<strong>Git Bash</strong>的命令工具执行以下命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm install hexo-generator-index --save</div><div class=\"line\">cnpm install hexo-generator-archive --save</div><div class=\"line\">cnpm install hexo-generator-category --save</div><div class=\"line\">cnpm install hexo-generator-tag --save</div><div class=\"line\">cnpm install hexo-server --save</div><div class=\"line\">cnpm install hexo-deployer-git --save</div><div class=\"line\">cnpm install hexo-deployer-heroku --save</div><div class=\"line\">cnpm install hexo-deployer-rsync --save</div><div class=\"line\">cnpm install hexo-deployer-openshift --save</div><div class=\"line\">cnpm install hexo-renderer-marked@0.2 --save</div><div class=\"line\">cnpm install hexo-renderer-stylus@0.2 --save</div><div class=\"line\">cnpm install hexo-generator-feed@1 --save</div><div class=\"line\">cnpm install hexo-generator-sitemap@1 --save</div></pre></td></tr></table></figure></p>\n<h3 id=\"本地配置\"><a href=\"#本地配置\" class=\"headerlink\" title=\"本地配置\"></a>本地配置</h3><p>初始的时候可以见到配置下。<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Hexo Configuration</span></div><div class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/configuration.html</span></div><div class=\"line\"><span class=\"comment\">## Source: https://github.com/hexojs/hexo/</span></div><div class=\"line\"><span class=\"comment\"># Site 站点配置</span></div><div class=\"line\"><span class=\"attr\">title:</span> Hexo-demo <span class=\"comment\">#网站标题</span></div><div class=\"line\"><span class=\"attr\">subtitle:</span> hexo is simple and easy to study <span class=\"comment\">#网站副标题</span></div><div class=\"line\"><span class=\"attr\">description:</span> this is hexo-demo <span class=\"comment\">#网栈描述</span></div><div class=\"line\"><span class=\"attr\">author:</span> pomy <span class=\"comment\">#你的名字</span></div><div class=\"line\"><span class=\"attr\">language:</span> zh-CN <span class=\"comment\">#网站使用的语言</span></div><div class=\"line\"><span class=\"attr\">timezone:</span> Asia/Shanghai <span class=\"comment\">#网站时区</span></div><div class=\"line\"><span class=\"comment\"># URL #可以不用配置</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"attr\">url:</span> http://yoursite.com <span class=\"comment\">#网址，搜索时会在搜索引擎中显示</span></div><div class=\"line\"><span class=\"attr\">root:</span> / <span class=\"comment\">#网站根目录</span></div><div class=\"line\"><span class=\"attr\">permalink:</span> :year/:month/:day/:title/ <span class=\"comment\">#永久链接格式</span></div><div class=\"line\"><span class=\"attr\">permalink_defaults:</span> <span class=\"comment\">#永久链接中各部分的默认值</span></div><div class=\"line\"><span class=\"comment\"># Directory 目录配置</span></div><div class=\"line\"><span class=\"attr\">source_dir:</span> source <span class=\"comment\">#资源文件夹，这个文件夹用来存放内容</span></div><div class=\"line\"><span class=\"attr\">public_dir:</span> public <span class=\"comment\">#公共文件夹，这个文件夹用于存放生成的站点文件</span></div><div class=\"line\"><span class=\"attr\">tag_dir:</span> tags <span class=\"comment\">#标签文件夹</span></div><div class=\"line\"><span class=\"attr\">archive_dir:</span> archives <span class=\"comment\">#归档文件夹</span></div><div class=\"line\"><span class=\"attr\">category_dir:</span> categories <span class=\"comment\">#分类文件夹</span></div><div class=\"line\"><span class=\"attr\">code_dir:</span> downloads/code <span class=\"comment\">#Include code 文件夹</span></div><div class=\"line\"><span class=\"attr\">i18n_dir:</span> :lang <span class=\"comment\">#国际化文件夹</span></div><div class=\"line\"><span class=\"attr\">skip_render:</span> <span class=\"comment\">#跳过指定文件的渲染，您可使用 glob 来配置路径</span></div><div class=\"line\"><span class=\"comment\"># Writing 写作配置</span></div><div class=\"line\"><span class=\"attr\">new_post_name:</span> :title.md <span class=\"comment\"># 新文章的文件名称</span></div><div class=\"line\"><span class=\"attr\">default_layout:</span> post <span class=\"comment\">#默认布局</span></div><div class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></div><div class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></div><div class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span> <span class=\"comment\">#把文件名称转换为 (1) 小写或 (2) 大写</span></div><div class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span> <span class=\"comment\">#显示草稿</span></div><div class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">false</span> <span class=\"comment\">#是否启动资源文件夹</span></div><div class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span> <span class=\"comment\">#把链接改为与根目录的相对位址</span></div><div class=\"line\"><span class=\"attr\">future:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">highlight:</span> <span class=\"comment\">#代码块的设置</span></div><div class=\"line\"><span class=\"attr\">enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">line_number:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">auto_detect:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">tab_replace:</span></div><div class=\"line\"><span class=\"comment\"># Category &amp; Tag 分类 &amp; 标签</span></div><div class=\"line\"><span class=\"attr\">default_category:</span> uncategorized <span class=\"comment\">#默认分类</span></div><div class=\"line\"><span class=\"attr\">category_map:</span> <span class=\"comment\">#分类别名</span></div><div class=\"line\"><span class=\"attr\">tag_map:</span> <span class=\"comment\">#标签别名</span></div><div class=\"line\"><span class=\"comment\"># Date / Time format 时间和日期</span></div><div class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></div><div class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></div><div class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></div><div class=\"line\"><span class=\"attr\">date_format:</span> YYYY-MM-DD</div><div class=\"line\"><span class=\"attr\">time_format:</span> HH:mm:ss</div><div class=\"line\"><span class=\"comment\"># Pagination 分页</span></div><div class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></div><div class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">10</span> <span class=\"comment\">#每页显示的文章量 (0 = 关闭分页功能)</span></div><div class=\"line\"><span class=\"attr\">pagination_dir:</span> page <span class=\"comment\">#分页目录</span></div><div class=\"line\"><span class=\"comment\"># Extensions 扩展</span></div><div class=\"line\"><span class=\"comment\">## Plugins: http://hexo.io/plugins/ 插件</span></div><div class=\"line\"><span class=\"comment\">## Themes: http://hexo.io/themes/ 主题</span></div><div class=\"line\"><span class=\"attr\">theme:</span> landscape <span class=\"comment\">#当前主题名称</span></div><div class=\"line\"><span class=\"comment\"># Deployment #部署到github</span></div><div class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">type:</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"本地查看效果\"><a href=\"#本地查看效果\" class=\"headerlink\" title=\"本地查看效果\"></a>本地查看效果</h3><p>继续执行以下命令，成功后可在浏览器输入localhost:4000查看效果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div><div class=\"line\">//the same as</div><div class=\"line\">hexo s</div></pre></td></tr></table></figure></p>\n<p>如果配置成功，即可在浏览器中看到<strong>hexo</strong>初始默认的<strong>hello world</strong>博文。</p>\n<hr>\n<h2 id=\"部署到GitHub\"><a href=\"#部署到GitHub\" class=\"headerlink\" title=\"部署到GitHub\"></a>部署到GitHub</h2><h3 id=\"新建repo\"><a href=\"#新建repo\" class=\"headerlink\" title=\"新建repo\"></a>新建repo</h3><p>在GitHub新建一个repo，名字为<strong>github-user-name.github.io</strong>，这是<strong>GitHub Pages</strong>的默认域名。然后使用<strong>git clone</strong>将repo下到本地。</p>\n<h3 id=\"静态文件\"><a href=\"#静态文件\" class=\"headerlink\" title=\"静态文件\"></a>静态文件</h3><p>在本地博客根目录下使用<strong>Git Bash</strong>的命令工具执行以下命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div><div class=\"line\">//the same as</div><div class=\"line\">hexo g</div></pre></td></tr></table></figure></p>\n<p>然后会在根目录下生成一个<strong>public</strong>文件夹，里面为博客对应的静态网页文件。将<strong>public</strong>文件夹下的所有文件/文件夹拷到刚刚新建repo的本地目录下，然后将所有内容<strong>publish</strong>到<strong>GitHub</strong>。然后就可以使用<strong><a href=\"https://github-user-name.github.io\">https://github-user-name.github.io</a></strong>就可以访问博客了，到这里博客就搭建完成了。</p>\n<hr>\n<h2 id=\"博客优化\"><a href=\"#博客优化\" class=\"headerlink\" title=\"博客优化\"></a>博客优化</h2><h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><p><strong>hexo</strong>博客有很多主题，如果喜欢折腾，可以将博客整得很好看，这里推荐使用<strong>NexT</strong>，也是我正在用的主题。其<strong>GitHub</strong>主页上面有很详细的说明。<br><a href=\"https://github.com/hexojs/hexo\">hexo</a><br><a href=\"http://theme-next.iissnan.com/getting-started.html\">使用文档</a>        </p>"},{"title":"jQuery常用方法","date":"2017-01-01T15:54:00.000Z","_content":"jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。jQuery的核心特性可以总结为:具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。本文总结了jQuery常用的方法，辅以代码说明。\n<!--more-->\n\n----\n### $.trim\n$.trim方法用于移除字符串头部和尾部多余的空格。\n```javascript\n$.trim('  Hello  '); // Hello\n```\n\n----\n### $.contains\n$.contains方法返回一个布尔值，表示某个DOM元素（第二个参数）是否为另一个DOM元素（第一个参数）的下级元素。\n```javascript\n$.contains(document.documentElement, document.body);  // true\n$.contains(document.body, document.documentElement);  // false\n```\n\n----\n### $.each\n$.each方法用于遍历数组和对象，然后返回原始对象。它接受两个参数，分别是数据集合和回调函数。\n```javascript\n$.each([ 52, 97 ], function( index, value ) {\n  console.log( index + \": \" + value );\n});\n// 0: 52 \n// 1: 97 \nvar obj = {\n  p1: \"hello\",\n  p2: \"world\"\n};\n$.each( obj, function( key, value ) {\n  console.log( key + \": \" + value );\n});\n// p1: hello\n// p2: world\n```\n需要注意的，jQuery对象实例也有一个each方法（$.fn.each），两者的作用差不多。\n\n----\n### $.map\n$.map方法也是用来遍历数组和对象，但是会返回一个新对象。\n```javascript\nvar a = [\"a\", \"b\", \"c\", \"d\", \"e\"];\na = $.map(a, function (n, i){\n  return (n.toUpperCase() + i);\n});\n// [\"A0\", \"B1\", \"C2\", \"D3\", \"E4\"]\n```\n\n----\n### $.inArray\n$.inArray方法返回一个值在数组中的位置（从0开始）。如果该值不在数组中，则返回-1。\n```javascript\nvar a = [1,2,3,4];\n$.inArray(4,a); // 3\n```\n\n----\n### $.extend\n$.extend方法用于将多个对象合并进第一个对象。\n```javascript\nvar o1 = {p1:'a',p2:'b'};\nvar o2 = {p1:'c'};\n$.extend(o1,o2);\no1.p1; // \"c\"\n```\n$.extend的另一种用法是生成一个新对象，用来继承原有对象。这时，它的第一个参数应该是一个空对象。\n```javascript\nvar o1 = {p1:'a',p2:'b'};\nvar o2 = {p1:'c'};\nvar o = $.extend({},o1,o2);\no; // Object {p1: \"c\", p2: \"b\"}\n```\n默认情况下，extend方法生成的对象是“浅拷贝”，也就是说，如果某个属性是对象或数组，那么只会生成指向这个对象或数组的指针，而不会复制值。如果想要“深拷贝”，可以在extend方法的第一个参数传入布尔值true。\n```javascript\nvar o1 = {p1:['a','b']};\nvar o2 = $.extend({},o1);\nvar o3 = $.extend(true,{},o1);\no1.p1[0]='c';\no2.p1; // [\"c\", \"b\"]\no3.p1; // [\"a\", \"b\"] \n```\n上面代码中，o2是浅拷贝，o3是深拷贝。结果，改变原始数组的属性，o2会跟着一起变，而o3不会。\n\n也就是说浅拷贝类似双向绑定。\n\n----\n### $.proxy\n$.proxy方法类似于ECMAScript 5的bind方法，可以绑定函数的上下文（也就是this对象）和参数，返回一个新函数。\njQuery.proxy()的主要用处是为回调函数绑定上下文对象。\n```javascript\nvar o = {\n    type: \"object\",\n    test: function(event) {\n        console.log(this.type);\n    }\n};\n$(\"#button\").on(\"click\", o.test); // 无输出\n $(\"#button\").on(\"click\", $.proxy(o.test, o)); // object\n```\n上面的代码中，第一个回调函数没有绑定上下文，所以结果为空，没有任何输出；第二个回调函数将上下文绑定为对象o，结果就为object。\n这个例子的另一种等价的写法是：\n```javascript\n$(\"#button\").on( \"click\", $.proxy(o, test)); \n```\n上面代码的$.proxy(o, test)的意思是，将o的方法test与o绑定。\n这个例子表明，proxy方法的写法主要有两种。\n```javascript\njQuery.proxy(function, context);\n// or\njQuery.proxy(context, name);\n```\n第一种写法是为函数（function）指定上下文对象（context），第二种写法是指定上下文对象（context）和它的某个方法名（name）。\n再看一个例子。正常情况下，下面代码中的this对象指向发生click事件的DOM对象。\n```javascript\n$('#myElement').click(function() {\n    $(this).addClass('aNewClass');\n});\n```\n如果我们想让回调函数延迟运行，使用setTimeout方法，代码就会出错，因为setTimeout使得回调函数在全局环境运行，this将指向全局对象。\n```javascript\n$('#myElement').click(function() {\n    setTimeout(function() {\n        $(this).addClass('aNewClass');\n    }, 1000);\n});\n```\n上面代码中的this，将指向全局对象window，导致出错。这时，就可以用proxy方法，将this对象绑定到myElement对象。\n```javascript\n$('#myElement').click(function() {\n    setTimeout($.proxy(function() {\n        $(this).addClass('aNewClass'); \n    }, this), 1000);\n});\n```\n\n----\n### $.data\n$.data方法可以用来在DOM节点上储存数据。\n```javascript\n// 存入数据\n$.data(document.body, \"foo\", 52 );\n// 读取数据\n$.data(document.body, \"foo\");\n// 读取所有数据\n$.data(document.body);\n```\n上面代码在网页元素body上储存了一个键值对，键名为“foo”，键值为52。\n$.removeData方法用于移除所存储的数据。\n```javascript\n$.data(div, \"test1\", \"VALUE-1\");\n$.removeData(div, \"test1\");\n```\n\n----\n### $.parseHTML  \n$.parseHTML方法用于将字符串解析为DOM对象。\n```javascript\nvar html = $.parseHTML(\"hello, <b>my name is</b> jQuery.\");\n```\n\n----\n### $.parseJSON\n$.parseJSON方法用于将JSON字符串解析为JavaScript对象，作用与原生的JSON.parse()类似。但是，jQuery没有提供类似JSON.stringify()的方法，即不提供将JavaScript对象转为JSON对象的方法。\n```javascript\nvar obj = $.parseJSON('{\"name\": \"John\"}');\n```\n\n----\n### $.parseXML\n$.parseXML方法用于将字符串解析为XML对象。\n```javascript\nvar xml = \"<rss version='2.0'><channel><title>RSS Title</title></channel></rss>\";\nvar xmlDoc = $.parseXML(xml);\n```\n\n----\n### $.makeArray\n$.makeArray方法将一个类似数组的对象，转化为真正的数组。\n```javascript\nvar a = $.makeArray(document.getElementsByTagName(\"div\"));\n```\n\n----\n### $.merge\n$.merge方法用于将一个数组（第二个参数）合并到另一个数组（第一个参数）之中。\n````javascript\nvar a1 = [0,1,2];\nvar a2 = [2,3,4];\n$.merge(a1, a2);\na1;\n// [0, 1, 2, 2, 3, 4]\n````\n\n----\n### $.now\n$.now方法返回当前时间距离1970年1月1日00:00:00 UTC对应的毫秒数，等同于(new Date).getTime()，即时间戳。\n```javascript\n$.now();\n//1480860477 2016年12月04日 22:07:57\n```\n\n----\n### 判断数据类型的方法\njQuery提供一系列工具方法，用来判断数据类型，以弥补JavaScript原生的**typeof**运算符的不足。以下方法对参数进行判断，返回一个布尔值。\n**jQuery.isArray()**：是否为数组。\n**jQuery.isEmptyObject()**：是否为空对象（不含可枚举的属性）。\n**jQuery.isFunction()**：是否为函数。\n**jQuery.isNumeric()**：是否为数组。\n**jQuery.isPlainObject()**：是否为使用“{}”或“new Object”生成的对象，而不是浏览器原生提供的对象。\n**jQuery.isWindow()**：是否为window对象。\n**jQuery.isXMLDoc()**：判断一个DOM节点是否处于XML文档之中。\n```javascript\n$.isEmptyObject({}); // true\n$.isPlainObject(document.location); // false\n$.isWindow(window); // true\n$.isXMLDoc(document.body); // false\n```\n除了上面这些方法以外，还有一个**$.type**方法，可以返回一个变量的数据类型。它的实质是用**Object.prototype.toString**方法读取对象内部的[[Class]]属性。\n```javascript\n$.type(/test/); // \"regexp\"\n```\n","source":"_posts/jQuery常用方法.md","raw":"title: jQuery常用方法\ndate: 2017/1/1 23:54\ncategories:\n- JavaScript\ntags:\n- jQuery\n---\njQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。jQuery的核心特性可以总结为:具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。本文总结了jQuery常用的方法，辅以代码说明。\n<!--more-->\n\n----\n### $.trim\n$.trim方法用于移除字符串头部和尾部多余的空格。\n```javascript\n$.trim('  Hello  '); // Hello\n```\n\n----\n### $.contains\n$.contains方法返回一个布尔值，表示某个DOM元素（第二个参数）是否为另一个DOM元素（第一个参数）的下级元素。\n```javascript\n$.contains(document.documentElement, document.body);  // true\n$.contains(document.body, document.documentElement);  // false\n```\n\n----\n### $.each\n$.each方法用于遍历数组和对象，然后返回原始对象。它接受两个参数，分别是数据集合和回调函数。\n```javascript\n$.each([ 52, 97 ], function( index, value ) {\n  console.log( index + \": \" + value );\n});\n// 0: 52 \n// 1: 97 \nvar obj = {\n  p1: \"hello\",\n  p2: \"world\"\n};\n$.each( obj, function( key, value ) {\n  console.log( key + \": \" + value );\n});\n// p1: hello\n// p2: world\n```\n需要注意的，jQuery对象实例也有一个each方法（$.fn.each），两者的作用差不多。\n\n----\n### $.map\n$.map方法也是用来遍历数组和对象，但是会返回一个新对象。\n```javascript\nvar a = [\"a\", \"b\", \"c\", \"d\", \"e\"];\na = $.map(a, function (n, i){\n  return (n.toUpperCase() + i);\n});\n// [\"A0\", \"B1\", \"C2\", \"D3\", \"E4\"]\n```\n\n----\n### $.inArray\n$.inArray方法返回一个值在数组中的位置（从0开始）。如果该值不在数组中，则返回-1。\n```javascript\nvar a = [1,2,3,4];\n$.inArray(4,a); // 3\n```\n\n----\n### $.extend\n$.extend方法用于将多个对象合并进第一个对象。\n```javascript\nvar o1 = {p1:'a',p2:'b'};\nvar o2 = {p1:'c'};\n$.extend(o1,o2);\no1.p1; // \"c\"\n```\n$.extend的另一种用法是生成一个新对象，用来继承原有对象。这时，它的第一个参数应该是一个空对象。\n```javascript\nvar o1 = {p1:'a',p2:'b'};\nvar o2 = {p1:'c'};\nvar o = $.extend({},o1,o2);\no; // Object {p1: \"c\", p2: \"b\"}\n```\n默认情况下，extend方法生成的对象是“浅拷贝”，也就是说，如果某个属性是对象或数组，那么只会生成指向这个对象或数组的指针，而不会复制值。如果想要“深拷贝”，可以在extend方法的第一个参数传入布尔值true。\n```javascript\nvar o1 = {p1:['a','b']};\nvar o2 = $.extend({},o1);\nvar o3 = $.extend(true,{},o1);\no1.p1[0]='c';\no2.p1; // [\"c\", \"b\"]\no3.p1; // [\"a\", \"b\"] \n```\n上面代码中，o2是浅拷贝，o3是深拷贝。结果，改变原始数组的属性，o2会跟着一起变，而o3不会。\n\n也就是说浅拷贝类似双向绑定。\n\n----\n### $.proxy\n$.proxy方法类似于ECMAScript 5的bind方法，可以绑定函数的上下文（也就是this对象）和参数，返回一个新函数。\njQuery.proxy()的主要用处是为回调函数绑定上下文对象。\n```javascript\nvar o = {\n    type: \"object\",\n    test: function(event) {\n        console.log(this.type);\n    }\n};\n$(\"#button\").on(\"click\", o.test); // 无输出\n $(\"#button\").on(\"click\", $.proxy(o.test, o)); // object\n```\n上面的代码中，第一个回调函数没有绑定上下文，所以结果为空，没有任何输出；第二个回调函数将上下文绑定为对象o，结果就为object。\n这个例子的另一种等价的写法是：\n```javascript\n$(\"#button\").on( \"click\", $.proxy(o, test)); \n```\n上面代码的$.proxy(o, test)的意思是，将o的方法test与o绑定。\n这个例子表明，proxy方法的写法主要有两种。\n```javascript\njQuery.proxy(function, context);\n// or\njQuery.proxy(context, name);\n```\n第一种写法是为函数（function）指定上下文对象（context），第二种写法是指定上下文对象（context）和它的某个方法名（name）。\n再看一个例子。正常情况下，下面代码中的this对象指向发生click事件的DOM对象。\n```javascript\n$('#myElement').click(function() {\n    $(this).addClass('aNewClass');\n});\n```\n如果我们想让回调函数延迟运行，使用setTimeout方法，代码就会出错，因为setTimeout使得回调函数在全局环境运行，this将指向全局对象。\n```javascript\n$('#myElement').click(function() {\n    setTimeout(function() {\n        $(this).addClass('aNewClass');\n    }, 1000);\n});\n```\n上面代码中的this，将指向全局对象window，导致出错。这时，就可以用proxy方法，将this对象绑定到myElement对象。\n```javascript\n$('#myElement').click(function() {\n    setTimeout($.proxy(function() {\n        $(this).addClass('aNewClass'); \n    }, this), 1000);\n});\n```\n\n----\n### $.data\n$.data方法可以用来在DOM节点上储存数据。\n```javascript\n// 存入数据\n$.data(document.body, \"foo\", 52 );\n// 读取数据\n$.data(document.body, \"foo\");\n// 读取所有数据\n$.data(document.body);\n```\n上面代码在网页元素body上储存了一个键值对，键名为“foo”，键值为52。\n$.removeData方法用于移除所存储的数据。\n```javascript\n$.data(div, \"test1\", \"VALUE-1\");\n$.removeData(div, \"test1\");\n```\n\n----\n### $.parseHTML  \n$.parseHTML方法用于将字符串解析为DOM对象。\n```javascript\nvar html = $.parseHTML(\"hello, <b>my name is</b> jQuery.\");\n```\n\n----\n### $.parseJSON\n$.parseJSON方法用于将JSON字符串解析为JavaScript对象，作用与原生的JSON.parse()类似。但是，jQuery没有提供类似JSON.stringify()的方法，即不提供将JavaScript对象转为JSON对象的方法。\n```javascript\nvar obj = $.parseJSON('{\"name\": \"John\"}');\n```\n\n----\n### $.parseXML\n$.parseXML方法用于将字符串解析为XML对象。\n```javascript\nvar xml = \"<rss version='2.0'><channel><title>RSS Title</title></channel></rss>\";\nvar xmlDoc = $.parseXML(xml);\n```\n\n----\n### $.makeArray\n$.makeArray方法将一个类似数组的对象，转化为真正的数组。\n```javascript\nvar a = $.makeArray(document.getElementsByTagName(\"div\"));\n```\n\n----\n### $.merge\n$.merge方法用于将一个数组（第二个参数）合并到另一个数组（第一个参数）之中。\n````javascript\nvar a1 = [0,1,2];\nvar a2 = [2,3,4];\n$.merge(a1, a2);\na1;\n// [0, 1, 2, 2, 3, 4]\n````\n\n----\n### $.now\n$.now方法返回当前时间距离1970年1月1日00:00:00 UTC对应的毫秒数，等同于(new Date).getTime()，即时间戳。\n```javascript\n$.now();\n//1480860477 2016年12月04日 22:07:57\n```\n\n----\n### 判断数据类型的方法\njQuery提供一系列工具方法，用来判断数据类型，以弥补JavaScript原生的**typeof**运算符的不足。以下方法对参数进行判断，返回一个布尔值。\n**jQuery.isArray()**：是否为数组。\n**jQuery.isEmptyObject()**：是否为空对象（不含可枚举的属性）。\n**jQuery.isFunction()**：是否为函数。\n**jQuery.isNumeric()**：是否为数组。\n**jQuery.isPlainObject()**：是否为使用“{}”或“new Object”生成的对象，而不是浏览器原生提供的对象。\n**jQuery.isWindow()**：是否为window对象。\n**jQuery.isXMLDoc()**：判断一个DOM节点是否处于XML文档之中。\n```javascript\n$.isEmptyObject({}); // true\n$.isPlainObject(document.location); // false\n$.isWindow(window); // true\n$.isXMLDoc(document.body); // false\n```\n除了上面这些方法以外，还有一个**$.type**方法，可以返回一个变量的数据类型。它的实质是用**Object.prototype.toString**方法读取对象内部的[[Class]]属性。\n```javascript\n$.type(/test/); // \"regexp\"\n```\n","slug":"jQuery常用方法","published":1,"updated":"2017-01-02T13:30:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixrheotj0006m04s1nogpzrb","content":"<p>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。jQuery的核心特性可以总结为:具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。本文总结了jQuery常用的方法，辅以代码说明。<br><a id=\"more\"></a></p>\n<hr>\n<h3 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\"$.trim\"></a>$.trim</h3><p>$.trim方法用于移除字符串头部和尾部多余的空格。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.trim(<span class=\"string\">'  Hello  '</span>); <span class=\"comment\">// Hello</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"contains\"><a href=\"#contains\" class=\"headerlink\" title=\"$.contains\"></a>$.contains</h3><p>$.contains方法返回一个布尔值，表示某个DOM元素（第二个参数）是否为另一个DOM元素（第一个参数）的下级元素。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.contains(<span class=\"built_in\">document</span>.documentElement, <span class=\"built_in\">document</span>.body);  <span class=\"comment\">// true</span></div><div class=\"line\">$.contains(<span class=\"built_in\">document</span>.body, <span class=\"built_in\">document</span>.documentElement);  <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"$.each\"></a>$.each</h3><p>$.each方法用于遍历数组和对象，然后返回原始对象。它接受两个参数，分别是数据集合和回调函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.each([ <span class=\"number\">52</span>, <span class=\"number\">97</span> ], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> index, value </span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( index + <span class=\"string\">\": \"</span> + value );</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 0: 52 </span></div><div class=\"line\"><span class=\"comment\">// 1: 97 </span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  <span class=\"attr\">p1</span>: <span class=\"string\">\"hello\"</span>,</div><div class=\"line\">  <span class=\"attr\">p2</span>: <span class=\"string\">\"world\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\">$.each( obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> key, value </span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( key + <span class=\"string\">\": \"</span> + value );</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// p1: hello</span></div><div class=\"line\"><span class=\"comment\">// p2: world</span></div></pre></td></tr></table></figure></p>\n<p>需要注意的，jQuery对象实例也有一个each方法（$.fn.each），两者的作用差不多。</p>\n<hr>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"$.map\"></a>$.map</h3><p>$.map方法也是用来遍历数组和对象，但是会返回一个新对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"e\"</span>];</div><div class=\"line\">a = $.map(a, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n, i</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (n.toUpperCase() + i);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// [\"A0\", \"B1\", \"C2\", \"D3\", \"E4\"]</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"inArray\"><a href=\"#inArray\" class=\"headerlink\" title=\"$.inArray\"></a>$.inArray</h3><p>$.inArray方法返回一个值在数组中的位置（从0开始）。如果该值不在数组中，则返回-1。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\">$.inArray(<span class=\"number\">4</span>,a); <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"$.extend\"></a>$.extend</h3><p>$.extend方法用于将多个对象合并进第一个对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;<span class=\"attr\">p1</span>:<span class=\"string\">'a'</span>,<span class=\"attr\">p2</span>:<span class=\"string\">'b'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o2 = &#123;<span class=\"attr\">p1</span>:<span class=\"string\">'c'</span>&#125;;</div><div class=\"line\">$.extend(o1,o2);</div><div class=\"line\">o1.p1; <span class=\"comment\">// \"c\"</span></div></pre></td></tr></table></figure></p>\n<p>$.extend的另一种用法是生成一个新对象，用来继承原有对象。这时，它的第一个参数应该是一个空对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;<span class=\"attr\">p1</span>:<span class=\"string\">'a'</span>,<span class=\"attr\">p2</span>:<span class=\"string\">'b'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o2 = &#123;<span class=\"attr\">p1</span>:<span class=\"string\">'c'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o = $.extend(&#123;&#125;,o1,o2);</div><div class=\"line\">o; <span class=\"comment\">// Object &#123;p1: \"c\", p2: \"b\"&#125;</span></div></pre></td></tr></table></figure></p>\n<p>默认情况下，extend方法生成的对象是“浅拷贝”，也就是说，如果某个属性是对象或数组，那么只会生成指向这个对象或数组的指针，而不会复制值。如果想要“深拷贝”，可以在extend方法的第一个参数传入布尔值true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;<span class=\"attr\">p1</span>:[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>]&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o2 = $.extend(&#123;&#125;,o1);</div><div class=\"line\"><span class=\"keyword\">var</span> o3 = $.extend(<span class=\"literal\">true</span>,&#123;&#125;,o1);</div><div class=\"line\">o1.p1[<span class=\"number\">0</span>]=<span class=\"string\">'c'</span>;</div><div class=\"line\">o2.p1; <span class=\"comment\">// [\"c\", \"b\"]</span></div><div class=\"line\">o3.p1; <span class=\"comment\">// [\"a\", \"b\"]</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，o2是浅拷贝，o3是深拷贝。结果，改变原始数组的属性，o2会跟着一起变，而o3不会。</p>\n<p>也就是说浅拷贝类似双向绑定。</p>\n<hr>\n<h3 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"$.proxy\"></a>$.proxy</h3><p>$.proxy方法类似于ECMAScript 5的bind方法，可以绑定函数的上下文（也就是this对象）和参数，返回一个新函数。<br>jQuery.proxy()的主要用处是为回调函数绑定上下文对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">\"object\"</span>,</div><div class=\"line\">    <span class=\"attr\">test</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">$(<span class=\"string\">\"#button\"</span>).on(<span class=\"string\">\"click\"</span>, o.test); <span class=\"comment\">// 无输出</span></div><div class=\"line\"> $(<span class=\"string\">\"#button\"</span>).on(<span class=\"string\">\"click\"</span>, $.proxy(o.test, o)); <span class=\"comment\">// object</span></div></pre></td></tr></table></figure></p>\n<p>上面的代码中，第一个回调函数没有绑定上下文，所以结果为空，没有任何输出；第二个回调函数将上下文绑定为对象o，结果就为object。<br>这个例子的另一种等价的写法是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#button\"</span>).on( <span class=\"string\">\"click\"</span>, $.proxy(o, test));</div></pre></td></tr></table></figure></p>\n<p>上面代码的$.proxy(o, test)的意思是，将o的方法test与o绑定。<br>这个例子表明，proxy方法的写法主要有两种。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.proxy(<span class=\"function\"><span class=\"keyword\">function</span>, <span class=\"title\">context</span>);</span></div><div class=\"line\">// <span class=\"title\">or</span></div><div class=\"line\"><span class=\"title\">jQuery</span>.<span class=\"title\">proxy</span>(<span class=\"params\">context, name</span>);</div></pre></td></tr></table></figure></p>\n<p>第一种写法是为函数（function）指定上下文对象（context），第二种写法是指定上下文对象（context）和它的某个方法名（name）。<br>再看一个例子。正常情况下，下面代码中的this对象指向发生click事件的DOM对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#myElement'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'aNewClass'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果我们想让回调函数延迟运行，使用setTimeout方法，代码就会出错，因为setTimeout使得回调函数在全局环境运行，this将指向全局对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#myElement'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'aNewClass'</span>);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面代码中的this，将指向全局对象window，导致出错。这时，就可以用proxy方法，将this对象绑定到myElement对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#myElement'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    setTimeout($.proxy(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'aNewClass'</span>); </div><div class=\"line\">    &#125;, <span class=\"keyword\">this</span>), <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"$.data\"></a>$.data</h3><p>$.data方法可以用来在DOM节点上储存数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 存入数据</span></div><div class=\"line\">$.data(<span class=\"built_in\">document</span>.body, <span class=\"string\">\"foo\"</span>, <span class=\"number\">52</span> );</div><div class=\"line\"><span class=\"comment\">// 读取数据</span></div><div class=\"line\">$.data(<span class=\"built_in\">document</span>.body, <span class=\"string\">\"foo\"</span>);</div><div class=\"line\"><span class=\"comment\">// 读取所有数据</span></div><div class=\"line\">$.data(<span class=\"built_in\">document</span>.body);</div></pre></td></tr></table></figure></p>\n<p>上面代码在网页元素body上储存了一个键值对，键名为“foo”，键值为52。<br>$.removeData方法用于移除所存储的数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.data(div, <span class=\"string\">\"test1\"</span>, <span class=\"string\">\"VALUE-1\"</span>);</div><div class=\"line\">$.removeData(div, <span class=\"string\">\"test1\"</span>);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"parseHTML\"><a href=\"#parseHTML\" class=\"headerlink\" title=\"$.parseHTML\"></a>$.parseHTML</h3><p>$.parseHTML方法用于将字符串解析为DOM对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> html = $.parseHTML(<span class=\"string\">\"hello, &lt;b&gt;my name is&lt;/b&gt; jQuery.\"</span>);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"parseJSON\"><a href=\"#parseJSON\" class=\"headerlink\" title=\"$.parseJSON\"></a>$.parseJSON</h3><p>$.parseJSON方法用于将JSON字符串解析为JavaScript对象，作用与原生的JSON.parse()类似。但是，jQuery没有提供类似JSON.stringify()的方法，即不提供将JavaScript对象转为JSON对象的方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = $.parseJSON(<span class=\"string\">'&#123;\"name\": \"John\"&#125;'</span>);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"parseXML\"><a href=\"#parseXML\" class=\"headerlink\" title=\"$.parseXML\"></a>$.parseXML</h3><p>$.parseXML方法用于将字符串解析为XML对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xml = <span class=\"string\">\"&lt;rss version='2.0'&gt;&lt;channel&gt;&lt;title&gt;RSS Title&lt;/title&gt;&lt;/channel&gt;&lt;/rss&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> xmlDoc = $.parseXML(xml);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"makeArray\"><a href=\"#makeArray\" class=\"headerlink\" title=\"$.makeArray\"></a>$.makeArray</h3><p>$.makeArray方法将一个类似数组的对象，转化为真正的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = $.makeArray(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"div\"</span>));</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"$.merge\"></a>$.merge</h3><p>$.merge方法用于将一个数组（第二个参数）合并到另一个数组（第一个参数）之中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a1 = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> a2 = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\">$.merge(a1, a2);</div><div class=\"line\">a1;</div><div class=\"line\"><span class=\"comment\">// [0, 1, 2, 2, 3, 4]</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"now\"><a href=\"#now\" class=\"headerlink\" title=\"$.now\"></a>$.now</h3><p>$.now方法返回当前时间距离1970年1月1日00:00:00 UTC对应的毫秒数，等同于(new Date).getTime()，即时间戳。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.now();</div><div class=\"line\"><span class=\"comment\">//1480860477 2016年12月04日 22:07:57</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"判断数据类型的方法\"><a href=\"#判断数据类型的方法\" class=\"headerlink\" title=\"判断数据类型的方法\"></a>判断数据类型的方法</h3><p>jQuery提供一系列工具方法，用来判断数据类型，以弥补JavaScript原生的<strong>typeof</strong>运算符的不足。以下方法对参数进行判断，返回一个布尔值。<br><strong>jQuery.isArray()</strong>：是否为数组。<br><strong>jQuery.isEmptyObject()</strong>：是否为空对象（不含可枚举的属性）。<br><strong>jQuery.isFunction()</strong>：是否为函数。<br><strong>jQuery.isNumeric()</strong>：是否为数组。<br><strong>jQuery.isPlainObject()</strong>：是否为使用“{}”或“new Object”生成的对象，而不是浏览器原生提供的对象。<br><strong>jQuery.isWindow()</strong>：是否为window对象。<br><strong>jQuery.isXMLDoc()</strong>：判断一个DOM节点是否处于XML文档之中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.isEmptyObject(&#123;&#125;); <span class=\"comment\">// true</span></div><div class=\"line\">$.isPlainObject(<span class=\"built_in\">document</span>.location); <span class=\"comment\">// false</span></div><div class=\"line\">$.isWindow(<span class=\"built_in\">window</span>); <span class=\"comment\">// true</span></div><div class=\"line\">$.isXMLDoc(<span class=\"built_in\">document</span>.body); <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>除了上面这些方法以外，还有一个<strong>$.type</strong>方法，可以返回一个变量的数据类型。它的实质是用<strong>Object.prototype.toString</strong>方法读取对象内部的[[Class]]属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.type(<span class=\"regexp\">/test/</span>); <span class=\"comment\">// \"regexp\"</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。jQuery的核心特性可以总结为:具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。本文总结了jQuery常用的方法，辅以代码说明。<br>","more":"</p>\n<hr>\n<h3 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\"$.trim\"></a>$.trim</h3><p>$.trim方法用于移除字符串头部和尾部多余的空格。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.trim(<span class=\"string\">'  Hello  '</span>); <span class=\"comment\">// Hello</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"contains\"><a href=\"#contains\" class=\"headerlink\" title=\"$.contains\"></a>$.contains</h3><p>$.contains方法返回一个布尔值，表示某个DOM元素（第二个参数）是否为另一个DOM元素（第一个参数）的下级元素。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.contains(<span class=\"built_in\">document</span>.documentElement, <span class=\"built_in\">document</span>.body);  <span class=\"comment\">// true</span></div><div class=\"line\">$.contains(<span class=\"built_in\">document</span>.body, <span class=\"built_in\">document</span>.documentElement);  <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"$.each\"></a>$.each</h3><p>$.each方法用于遍历数组和对象，然后返回原始对象。它接受两个参数，分别是数据集合和回调函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.each([ <span class=\"number\">52</span>, <span class=\"number\">97</span> ], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> index, value </span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( index + <span class=\"string\">\": \"</span> + value );</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 0: 52 </span></div><div class=\"line\"><span class=\"comment\">// 1: 97 </span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  <span class=\"attr\">p1</span>: <span class=\"string\">\"hello\"</span>,</div><div class=\"line\">  <span class=\"attr\">p2</span>: <span class=\"string\">\"world\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\">$.each( obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> key, value </span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( key + <span class=\"string\">\": \"</span> + value );</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// p1: hello</span></div><div class=\"line\"><span class=\"comment\">// p2: world</span></div></pre></td></tr></table></figure></p>\n<p>需要注意的，jQuery对象实例也有一个each方法（$.fn.each），两者的作用差不多。</p>\n<hr>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"$.map\"></a>$.map</h3><p>$.map方法也是用来遍历数组和对象，但是会返回一个新对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"e\"</span>];</div><div class=\"line\">a = $.map(a, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n, i</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (n.toUpperCase() + i);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// [\"A0\", \"B1\", \"C2\", \"D3\", \"E4\"]</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"inArray\"><a href=\"#inArray\" class=\"headerlink\" title=\"$.inArray\"></a>$.inArray</h3><p>$.inArray方法返回一个值在数组中的位置（从0开始）。如果该值不在数组中，则返回-1。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\">$.inArray(<span class=\"number\">4</span>,a); <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"$.extend\"></a>$.extend</h3><p>$.extend方法用于将多个对象合并进第一个对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;<span class=\"attr\">p1</span>:<span class=\"string\">'a'</span>,<span class=\"attr\">p2</span>:<span class=\"string\">'b'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o2 = &#123;<span class=\"attr\">p1</span>:<span class=\"string\">'c'</span>&#125;;</div><div class=\"line\">$.extend(o1,o2);</div><div class=\"line\">o1.p1; <span class=\"comment\">// \"c\"</span></div></pre></td></tr></table></figure></p>\n<p>$.extend的另一种用法是生成一个新对象，用来继承原有对象。这时，它的第一个参数应该是一个空对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;<span class=\"attr\">p1</span>:<span class=\"string\">'a'</span>,<span class=\"attr\">p2</span>:<span class=\"string\">'b'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o2 = &#123;<span class=\"attr\">p1</span>:<span class=\"string\">'c'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o = $.extend(&#123;&#125;,o1,o2);</div><div class=\"line\">o; <span class=\"comment\">// Object &#123;p1: \"c\", p2: \"b\"&#125;</span></div></pre></td></tr></table></figure></p>\n<p>默认情况下，extend方法生成的对象是“浅拷贝”，也就是说，如果某个属性是对象或数组，那么只会生成指向这个对象或数组的指针，而不会复制值。如果想要“深拷贝”，可以在extend方法的第一个参数传入布尔值true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;<span class=\"attr\">p1</span>:[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>]&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o2 = $.extend(&#123;&#125;,o1);</div><div class=\"line\"><span class=\"keyword\">var</span> o3 = $.extend(<span class=\"literal\">true</span>,&#123;&#125;,o1);</div><div class=\"line\">o1.p1[<span class=\"number\">0</span>]=<span class=\"string\">'c'</span>;</div><div class=\"line\">o2.p1; <span class=\"comment\">// [\"c\", \"b\"]</span></div><div class=\"line\">o3.p1; <span class=\"comment\">// [\"a\", \"b\"]</span></div></pre></td></tr></table></figure></p>\n<p>上面代码中，o2是浅拷贝，o3是深拷贝。结果，改变原始数组的属性，o2会跟着一起变，而o3不会。</p>\n<p>也就是说浅拷贝类似双向绑定。</p>\n<hr>\n<h3 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"$.proxy\"></a>$.proxy</h3><p>$.proxy方法类似于ECMAScript 5的bind方法，可以绑定函数的上下文（也就是this对象）和参数，返回一个新函数。<br>jQuery.proxy()的主要用处是为回调函数绑定上下文对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">\"object\"</span>,</div><div class=\"line\">    <span class=\"attr\">test</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">$(<span class=\"string\">\"#button\"</span>).on(<span class=\"string\">\"click\"</span>, o.test); <span class=\"comment\">// 无输出</span></div><div class=\"line\"> $(<span class=\"string\">\"#button\"</span>).on(<span class=\"string\">\"click\"</span>, $.proxy(o.test, o)); <span class=\"comment\">// object</span></div></pre></td></tr></table></figure></p>\n<p>上面的代码中，第一个回调函数没有绑定上下文，所以结果为空，没有任何输出；第二个回调函数将上下文绑定为对象o，结果就为object。<br>这个例子的另一种等价的写法是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#button\"</span>).on( <span class=\"string\">\"click\"</span>, $.proxy(o, test));</div></pre></td></tr></table></figure></p>\n<p>上面代码的$.proxy(o, test)的意思是，将o的方法test与o绑定。<br>这个例子表明，proxy方法的写法主要有两种。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.proxy(<span class=\"function\"><span class=\"keyword\">function</span>, <span class=\"title\">context</span>);</div><div class=\"line\">// <span class=\"title\">or</span></div><div class=\"line\"><span class=\"title\">jQuery</span>.<span class=\"title\">proxy</span>(<span class=\"params\">context, name</span>);</span></div></pre></td></tr></table></figure></p>\n<p>第一种写法是为函数（function）指定上下文对象（context），第二种写法是指定上下文对象（context）和它的某个方法名（name）。<br>再看一个例子。正常情况下，下面代码中的this对象指向发生click事件的DOM对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#myElement'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'aNewClass'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果我们想让回调函数延迟运行，使用setTimeout方法，代码就会出错，因为setTimeout使得回调函数在全局环境运行，this将指向全局对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#myElement'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'aNewClass'</span>);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面代码中的this，将指向全局对象window，导致出错。这时，就可以用proxy方法，将this对象绑定到myElement对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#myElement'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    setTimeout($.proxy(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'aNewClass'</span>); </div><div class=\"line\">    &#125;, <span class=\"keyword\">this</span>), <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"$.data\"></a>$.data</h3><p>$.data方法可以用来在DOM节点上储存数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 存入数据</span></div><div class=\"line\">$.data(<span class=\"built_in\">document</span>.body, <span class=\"string\">\"foo\"</span>, <span class=\"number\">52</span> );</div><div class=\"line\"><span class=\"comment\">// 读取数据</span></div><div class=\"line\">$.data(<span class=\"built_in\">document</span>.body, <span class=\"string\">\"foo\"</span>);</div><div class=\"line\"><span class=\"comment\">// 读取所有数据</span></div><div class=\"line\">$.data(<span class=\"built_in\">document</span>.body);</div></pre></td></tr></table></figure></p>\n<p>上面代码在网页元素body上储存了一个键值对，键名为“foo”，键值为52。<br>$.removeData方法用于移除所存储的数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.data(div, <span class=\"string\">\"test1\"</span>, <span class=\"string\">\"VALUE-1\"</span>);</div><div class=\"line\">$.removeData(div, <span class=\"string\">\"test1\"</span>);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"parseHTML\"><a href=\"#parseHTML\" class=\"headerlink\" title=\"$.parseHTML\"></a>$.parseHTML</h3><p>$.parseHTML方法用于将字符串解析为DOM对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> html = $.parseHTML(<span class=\"string\">\"hello, &lt;b&gt;my name is&lt;/b&gt; jQuery.\"</span>);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"parseJSON\"><a href=\"#parseJSON\" class=\"headerlink\" title=\"$.parseJSON\"></a>$.parseJSON</h3><p>$.parseJSON方法用于将JSON字符串解析为JavaScript对象，作用与原生的JSON.parse()类似。但是，jQuery没有提供类似JSON.stringify()的方法，即不提供将JavaScript对象转为JSON对象的方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = $.parseJSON(<span class=\"string\">'&#123;\"name\": \"John\"&#125;'</span>);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"parseXML\"><a href=\"#parseXML\" class=\"headerlink\" title=\"$.parseXML\"></a>$.parseXML</h3><p>$.parseXML方法用于将字符串解析为XML对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xml = <span class=\"string\">\"&lt;rss version='2.0'&gt;&lt;channel&gt;&lt;title&gt;RSS Title&lt;/title&gt;&lt;/channel&gt;&lt;/rss&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> xmlDoc = $.parseXML(xml);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"makeArray\"><a href=\"#makeArray\" class=\"headerlink\" title=\"$.makeArray\"></a>$.makeArray</h3><p>$.makeArray方法将一个类似数组的对象，转化为真正的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = $.makeArray(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"div\"</span>));</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"$.merge\"></a>$.merge</h3><p>$.merge方法用于将一个数组（第二个参数）合并到另一个数组（第一个参数）之中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a1 = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> a2 = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\">$.merge(a1, a2);</div><div class=\"line\">a1;</div><div class=\"line\"><span class=\"comment\">// [0, 1, 2, 2, 3, 4]</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"now\"><a href=\"#now\" class=\"headerlink\" title=\"$.now\"></a>$.now</h3><p>$.now方法返回当前时间距离1970年1月1日00:00:00 UTC对应的毫秒数，等同于(new Date).getTime()，即时间戳。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.now();</div><div class=\"line\"><span class=\"comment\">//1480860477 2016年12月04日 22:07:57</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"判断数据类型的方法\"><a href=\"#判断数据类型的方法\" class=\"headerlink\" title=\"判断数据类型的方法\"></a>判断数据类型的方法</h3><p>jQuery提供一系列工具方法，用来判断数据类型，以弥补JavaScript原生的<strong>typeof</strong>运算符的不足。以下方法对参数进行判断，返回一个布尔值。<br><strong>jQuery.isArray()</strong>：是否为数组。<br><strong>jQuery.isEmptyObject()</strong>：是否为空对象（不含可枚举的属性）。<br><strong>jQuery.isFunction()</strong>：是否为函数。<br><strong>jQuery.isNumeric()</strong>：是否为数组。<br><strong>jQuery.isPlainObject()</strong>：是否为使用“{}”或“new Object”生成的对象，而不是浏览器原生提供的对象。<br><strong>jQuery.isWindow()</strong>：是否为window对象。<br><strong>jQuery.isXMLDoc()</strong>：判断一个DOM节点是否处于XML文档之中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.isEmptyObject(&#123;&#125;); <span class=\"comment\">// true</span></div><div class=\"line\">$.isPlainObject(<span class=\"built_in\">document</span>.location); <span class=\"comment\">// false</span></div><div class=\"line\">$.isWindow(<span class=\"built_in\">window</span>); <span class=\"comment\">// true</span></div><div class=\"line\">$.isXMLDoc(<span class=\"built_in\">document</span>.body); <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>除了上面这些方法以外，还有一个<strong>$.type</strong>方法，可以返回一个变量的数据类型。它的实质是用<strong>Object.prototype.toString</strong>方法读取对象内部的[[Class]]属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.type(<span class=\"regexp\">/test/</span>); <span class=\"comment\">// \"regexp\"</span></div></pre></td></tr></table></figure></p>"},{"title":"Ajax常用写法","date":"2017-01-02T02:23:00.000Z","_content":"AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。本文介绍了Ajax的常用写法，以及各个属性的解释说明，使之有一个大致的了解。\n<!--more-->\n\n----\n### $.ajax\njQuery对象上面还定义了Ajax方法($.ajax())，用来处理Ajax操作。调用该方法后，浏览器就会向服务器发出一个HTTP请求。\n$.ajax()的用法有多种，最常见的是提供一个对象参数。\n```javascript\n$.ajax({\n  \tasync: true,\n  \turl: '/url/to/json',\n  \ttype: 'GET',\n  \tdata : { id : 123 },\n  \tdataType: 'json',\n  \ttimeout: 30000,\n  \tsuccess: successCallback,\n  \terror: errorCallback,\n  \tcomplete: completeCallback\n});\nfunction successCallback(json) {\n    $('<h1/>').text(json.title).appendTo('body');\n},\nfunction errorCallback(xhr, status){\n    console.log('出问题了！');\n},\nfunction completeCallback(xhr, status){\n    console.log('Ajax请求已结束。');\n}\n```\n上面代码的对象参数有多个属性，含义如下：\n**async**：该项默认为true，如果设为false，则表示发出的是同步请求。\n**cache**: 该项默认为true，如果设为false，则浏览器不缓存返回服务器返回的数据。注意，浏览器本身就不会缓存POST请求返回的数据，所以即使设为false，也只对HEAD和GET请求有效。\n**url**：服务器端网址。这是唯一必需的一个属性，其他属性都可以省略。\n**type**：向服务器发送信息所使用的HTTP动词，默认为GET，其他动词有POST、PUT、DELETE。\n**dataType**：向服务器请求的数据类型，可以设为text、html、script、json、jsonp和xml。\n**data**：向服务器发送的数据，如果使用GET方法，此项将转为查询字符串，附在网址的最后。\n**success**：请求成功时的回调函数，函数参数为服务器传回的数据、状态信息、发出请求的原始对象。\n**timeout**: 等待的最长毫秒数。如果过了这个时间，请求还没有返回，则自动将请求状态改为失败。\n**error**：请求失败时的回调函数，函数参数为发出请求的原始对象以及返回的状态信息。\n**complete**：不管请求成功或失败，都会执行的回调函数，函数参数为发出请求的原始对象以及返回的状态信息。\n这些参数之中，url可以独立出来，作为ajax方法的第一个参数。也就是说，上面代码还可以写成下面这样。\n```javascript\n$.ajax('/url/to/json',{\n  type: 'GET',\n  dataType: 'json',\n  success: successCallback,\n  error: errorCallback,\n  complete: completeCallback\n});\nfunction successCallback(json) {\n    $('<h1/>').text(json.title).appendTo('body');\n},\nfunction errorCallback(xhr, status){\n    console.log('出问题了！');\n},\nfunction completeCallback(xhr, status){\n    console.log('Ajax请求已结束。');\n}\n```\n\n----\n### Ajax简便写法\najax方法还有一些简便写法。\n**$.get()** : 发出GET请求。\n**$.getScript()** : 读取一个JavaScript脚本文件并执行。\n**$.getJSON()** : 发出GET请求，读取一个JSON文件。\n**$.post()** : 发出POST请求。\n**$.fn.load(**) : 读取一个html文件，并将其放入当前元素之中。\n一般来说，这些简便方法依次接受三个参数：url、数据、成功时的回调函数。\n\n----\n#### $.get()\n对应**HTTP**的**GET**方法。\nget方法接受两个参数，分别为服务器端网址和请求成功后的回调函数。\n```javascript\n$.get('/data/people.html', function(html){\n  $('#target').html(html);\n});\n```\n\n----\n#### $.post()\n对应**HTTP**的**POST**方法。\npost方法接受三个参数，服务器端网址、发给服务器的数据和请求成功后的回调函数。\n```javascript\n$.post('/data/save', {name: 'Rebecca'}, function (resp){\n  console.log(JSON.parse(resp));\n});\n```\n\n----\n#### $.getJSON()\najax方法的另一个简便写法是getJSON方法。当服务器端返回JSON格式的数据，可以用这个方法代替$.ajax方法。\n```javascript\n$.getJSON('url/to/json', {'a': 1}, function(data){\n    console.log(data);\n});\n```\n上面的代码等同于下面的写法。\n```javascript\n$.ajax({\n  dataType: \"json\",\n  url: '/url/to/data',\n  data: {'a': 1},\n  success: function(data){\n    console.log(data);\n  }\n});\n```\n\n----\n#### $.getScript()\n$.getScript方法用于从服务器端加载一个脚本文件。\n```javascript\n$.getScript('/static/js/myScript.js', function() {\n    functionFromMyScript();\n});\n```\n上面代码先从服务器加载myScript.js脚本，然后在回调函数中执行该脚本提供的函数。\ngetScript的回调函数接受三个参数，分别是脚本文件的内容，HTTP响应的状态信息和ajax对象实例。\n```javascript\n$.getScript( \"ajax/test.js\", function (data, textStatus, jqxhr){\n  console.log( data ); // test.js的内容\n  console.log( textStatus ); // Success\n  console.log( jqxhr.status ); // 200\n});\n```\ngetScript是ajax方法的简便写法，因此返回的是一个deferred对象，可以使用deferred接口。\n```javascript\njQuery.getScript(\"/path/to/myscript.js\")\n    .done(function() {\n        // ...\n    })\n    .fail(function() {\n        // ...\n});\n```\n\n----\n#### $.fn.load()\n$.fn.load不是jQuery的工具方法，而是定义在jQuery对象实例上的方法，用于获取服务器端的HTML文件，将其放入当前元素。由于该方法也属于ajax操作，所以放在这里一起讲。\n```javascript\n$('#newContent').load('/foo.html');\n```\n$.fn.load方法还可以指定一个选择器，将远程文件中匹配选择器的部分，放入当前元素，并指定操作完成时的回调函数。\n```javascript\n$('#newContent').load('/foo.html #myDiv h1:first',\n    function(html) {\n        console.log('内容更新！');\n});\n```\n上面代码只加载foo.html中匹配“#myDiv h1:first”的部分，加载完成后会运行指定的回调函数。\n\n----\n### Ajax事件\n**jQuery**提供以下一些方法，用于指定特定的AJAX事件的回调函数。\n**.ajaxComplete()** : ajax请求完成。\n**.ajaxError()** : ajax请求出错。\n**.ajaxSend()** : ajax请求发出之前。\n**.ajaxStart()** : 第一个ajax请求开始发出，即没有还未完成ajax请求。\n**.ajaxStop()** : 所有ajax请求完成之后。\n**.ajaxSuccess()** : ajax请求成功之后。\n下面是示例。\n```javascript\n$('#loading_indicator')\n.ajaxStart(function (){$(this).show();})\n.ajaxStop(function (){$(this).hide();});\n$('#loading_indicator')\n.ajaxStart(function (){$(this).show();})\n.ajaxStop(function (){$(this).hide();});\n```\n\n----\n### 返回值\najax方法返回的是一个deferred对象，可以用then方法为该对象指定回调函数。\n```javascript\n$.ajax({\n  url: '/data/people.json',\n  dataType: 'json'\n}).then(function (resp){\n  console.log(resp.people);\n});\n```\n\n----\n### JSONP\n由于浏览器存在“同域限制”，ajax方法只能向当前网页所在的域名发出HTTP请求。但是，通过在当前网页中插入script元素（\\<script>），可以向不同的域名发出GET请求，这种变通方法叫做JSONP（JSON with Padding）。\najax方法可以发出JSONP请求，方法是在对象参数中指定dataType为JSONP。\n```javascript\n$.ajax({\n  url: '/data/search.jsonp',\n  data: {q: 'a'},\n  dataType: 'jsonp',\n  success: function(resp) {\n    $('#target').html('Results: ' + resp.results.length);\n  }\n});\n```\nJSONP的通常做法是，在所要请求的URL后面加在回调函数的名称。ajax方法规定，如果所请求的网址以类似“callback=?”的形式结尾，则自动采用JSONP形式。所以，上面的代码还可以写成下面这样。\n```javascript\n$.getJSON('/data/search.jsonp?q=a&callback=?',\n  function(resp) {\n    $('#target').html('Results: ' + resp.results.length);\n  }\n);\n```","source":"_posts/Ajax常用写法.md","raw":"title: Ajax常用写法\ndate: 2017/1/2 10:23\ncategories:\n- JavaScript\ntags:\n- jQuery\n- Ajax\n---\nAJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。本文介绍了Ajax的常用写法，以及各个属性的解释说明，使之有一个大致的了解。\n<!--more-->\n\n----\n### $.ajax\njQuery对象上面还定义了Ajax方法($.ajax())，用来处理Ajax操作。调用该方法后，浏览器就会向服务器发出一个HTTP请求。\n$.ajax()的用法有多种，最常见的是提供一个对象参数。\n```javascript\n$.ajax({\n  \tasync: true,\n  \turl: '/url/to/json',\n  \ttype: 'GET',\n  \tdata : { id : 123 },\n  \tdataType: 'json',\n  \ttimeout: 30000,\n  \tsuccess: successCallback,\n  \terror: errorCallback,\n  \tcomplete: completeCallback\n});\nfunction successCallback(json) {\n    $('<h1/>').text(json.title).appendTo('body');\n},\nfunction errorCallback(xhr, status){\n    console.log('出问题了！');\n},\nfunction completeCallback(xhr, status){\n    console.log('Ajax请求已结束。');\n}\n```\n上面代码的对象参数有多个属性，含义如下：\n**async**：该项默认为true，如果设为false，则表示发出的是同步请求。\n**cache**: 该项默认为true，如果设为false，则浏览器不缓存返回服务器返回的数据。注意，浏览器本身就不会缓存POST请求返回的数据，所以即使设为false，也只对HEAD和GET请求有效。\n**url**：服务器端网址。这是唯一必需的一个属性，其他属性都可以省略。\n**type**：向服务器发送信息所使用的HTTP动词，默认为GET，其他动词有POST、PUT、DELETE。\n**dataType**：向服务器请求的数据类型，可以设为text、html、script、json、jsonp和xml。\n**data**：向服务器发送的数据，如果使用GET方法，此项将转为查询字符串，附在网址的最后。\n**success**：请求成功时的回调函数，函数参数为服务器传回的数据、状态信息、发出请求的原始对象。\n**timeout**: 等待的最长毫秒数。如果过了这个时间，请求还没有返回，则自动将请求状态改为失败。\n**error**：请求失败时的回调函数，函数参数为发出请求的原始对象以及返回的状态信息。\n**complete**：不管请求成功或失败，都会执行的回调函数，函数参数为发出请求的原始对象以及返回的状态信息。\n这些参数之中，url可以独立出来，作为ajax方法的第一个参数。也就是说，上面代码还可以写成下面这样。\n```javascript\n$.ajax('/url/to/json',{\n  type: 'GET',\n  dataType: 'json',\n  success: successCallback,\n  error: errorCallback,\n  complete: completeCallback\n});\nfunction successCallback(json) {\n    $('<h1/>').text(json.title).appendTo('body');\n},\nfunction errorCallback(xhr, status){\n    console.log('出问题了！');\n},\nfunction completeCallback(xhr, status){\n    console.log('Ajax请求已结束。');\n}\n```\n\n----\n### Ajax简便写法\najax方法还有一些简便写法。\n**$.get()** : 发出GET请求。\n**$.getScript()** : 读取一个JavaScript脚本文件并执行。\n**$.getJSON()** : 发出GET请求，读取一个JSON文件。\n**$.post()** : 发出POST请求。\n**$.fn.load(**) : 读取一个html文件，并将其放入当前元素之中。\n一般来说，这些简便方法依次接受三个参数：url、数据、成功时的回调函数。\n\n----\n#### $.get()\n对应**HTTP**的**GET**方法。\nget方法接受两个参数，分别为服务器端网址和请求成功后的回调函数。\n```javascript\n$.get('/data/people.html', function(html){\n  $('#target').html(html);\n});\n```\n\n----\n#### $.post()\n对应**HTTP**的**POST**方法。\npost方法接受三个参数，服务器端网址、发给服务器的数据和请求成功后的回调函数。\n```javascript\n$.post('/data/save', {name: 'Rebecca'}, function (resp){\n  console.log(JSON.parse(resp));\n});\n```\n\n----\n#### $.getJSON()\najax方法的另一个简便写法是getJSON方法。当服务器端返回JSON格式的数据，可以用这个方法代替$.ajax方法。\n```javascript\n$.getJSON('url/to/json', {'a': 1}, function(data){\n    console.log(data);\n});\n```\n上面的代码等同于下面的写法。\n```javascript\n$.ajax({\n  dataType: \"json\",\n  url: '/url/to/data',\n  data: {'a': 1},\n  success: function(data){\n    console.log(data);\n  }\n});\n```\n\n----\n#### $.getScript()\n$.getScript方法用于从服务器端加载一个脚本文件。\n```javascript\n$.getScript('/static/js/myScript.js', function() {\n    functionFromMyScript();\n});\n```\n上面代码先从服务器加载myScript.js脚本，然后在回调函数中执行该脚本提供的函数。\ngetScript的回调函数接受三个参数，分别是脚本文件的内容，HTTP响应的状态信息和ajax对象实例。\n```javascript\n$.getScript( \"ajax/test.js\", function (data, textStatus, jqxhr){\n  console.log( data ); // test.js的内容\n  console.log( textStatus ); // Success\n  console.log( jqxhr.status ); // 200\n});\n```\ngetScript是ajax方法的简便写法，因此返回的是一个deferred对象，可以使用deferred接口。\n```javascript\njQuery.getScript(\"/path/to/myscript.js\")\n    .done(function() {\n        // ...\n    })\n    .fail(function() {\n        // ...\n});\n```\n\n----\n#### $.fn.load()\n$.fn.load不是jQuery的工具方法，而是定义在jQuery对象实例上的方法，用于获取服务器端的HTML文件，将其放入当前元素。由于该方法也属于ajax操作，所以放在这里一起讲。\n```javascript\n$('#newContent').load('/foo.html');\n```\n$.fn.load方法还可以指定一个选择器，将远程文件中匹配选择器的部分，放入当前元素，并指定操作完成时的回调函数。\n```javascript\n$('#newContent').load('/foo.html #myDiv h1:first',\n    function(html) {\n        console.log('内容更新！');\n});\n```\n上面代码只加载foo.html中匹配“#myDiv h1:first”的部分，加载完成后会运行指定的回调函数。\n\n----\n### Ajax事件\n**jQuery**提供以下一些方法，用于指定特定的AJAX事件的回调函数。\n**.ajaxComplete()** : ajax请求完成。\n**.ajaxError()** : ajax请求出错。\n**.ajaxSend()** : ajax请求发出之前。\n**.ajaxStart()** : 第一个ajax请求开始发出，即没有还未完成ajax请求。\n**.ajaxStop()** : 所有ajax请求完成之后。\n**.ajaxSuccess()** : ajax请求成功之后。\n下面是示例。\n```javascript\n$('#loading_indicator')\n.ajaxStart(function (){$(this).show();})\n.ajaxStop(function (){$(this).hide();});\n$('#loading_indicator')\n.ajaxStart(function (){$(this).show();})\n.ajaxStop(function (){$(this).hide();});\n```\n\n----\n### 返回值\najax方法返回的是一个deferred对象，可以用then方法为该对象指定回调函数。\n```javascript\n$.ajax({\n  url: '/data/people.json',\n  dataType: 'json'\n}).then(function (resp){\n  console.log(resp.people);\n});\n```\n\n----\n### JSONP\n由于浏览器存在“同域限制”，ajax方法只能向当前网页所在的域名发出HTTP请求。但是，通过在当前网页中插入script元素（\\<script>），可以向不同的域名发出GET请求，这种变通方法叫做JSONP（JSON with Padding）。\najax方法可以发出JSONP请求，方法是在对象参数中指定dataType为JSONP。\n```javascript\n$.ajax({\n  url: '/data/search.jsonp',\n  data: {q: 'a'},\n  dataType: 'jsonp',\n  success: function(resp) {\n    $('#target').html('Results: ' + resp.results.length);\n  }\n});\n```\nJSONP的通常做法是，在所要请求的URL后面加在回调函数的名称。ajax方法规定，如果所请求的网址以类似“callback=?”的形式结尾，则自动采用JSONP形式。所以，上面的代码还可以写成下面这样。\n```javascript\n$.getJSON('/data/search.jsonp?q=a&callback=?',\n  function(resp) {\n    $('#target').html('Results: ' + resp.results.length);\n  }\n);\n```","slug":"Ajax常用写法","published":1,"updated":"2017-01-02T13:28:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixrheoto0007m04sn9cxakfx","content":"<p>AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。本文介绍了Ajax的常用写法，以及各个属性的解释说明，使之有一个大致的了解。<br><a id=\"more\"></a></p>\n<hr>\n<h3 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"$.ajax\"></a>$.ajax</h3><p>jQuery对象上面还定义了Ajax方法($.ajax())，用来处理Ajax操作。调用该方法后，浏览器就会向服务器发出一个HTTP请求。<br>$.ajax()的用法有多种，最常见的是提供一个对象参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  \t<span class=\"attr\">async</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  \t<span class=\"attr\">url</span>: <span class=\"string\">'/url/to/json'</span>,</div><div class=\"line\">  \t<span class=\"attr\">type</span>: <span class=\"string\">'GET'</span>,</div><div class=\"line\">  \t<span class=\"attr\">data</span> : &#123; <span class=\"attr\">id</span> : <span class=\"number\">123</span> &#125;,</div><div class=\"line\">  \t<span class=\"attr\">dataType</span>: <span class=\"string\">'json'</span>,</div><div class=\"line\">  \t<span class=\"attr\">timeout</span>: <span class=\"number\">30000</span>,</div><div class=\"line\">  \t<span class=\"attr\">success</span>: successCallback,</div><div class=\"line\">  \t<span class=\"attr\">error</span>: errorCallback,</div><div class=\"line\">  \t<span class=\"attr\">complete</span>: completeCallback</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">successCallback</span>(<span class=\"params\">json</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'&lt;h1/&gt;'</span>).text(json.title).appendTo(<span class=\"string\">'body'</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">errorCallback</span>(<span class=\"params\">xhr, status</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'出问题了！'</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">completeCallback</span>(<span class=\"params\">xhr, status</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ajax请求已结束。'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码的对象参数有多个属性，含义如下：<br><strong>async</strong>：该项默认为true，如果设为false，则表示发出的是同步请求。<br><strong>cache</strong>: 该项默认为true，如果设为false，则浏览器不缓存返回服务器返回的数据。注意，浏览器本身就不会缓存POST请求返回的数据，所以即使设为false，也只对HEAD和GET请求有效。<br><strong>url</strong>：服务器端网址。这是唯一必需的一个属性，其他属性都可以省略。<br><strong>type</strong>：向服务器发送信息所使用的HTTP动词，默认为GET，其他动词有POST、PUT、DELETE。<br><strong>dataType</strong>：向服务器请求的数据类型，可以设为text、html、script、json、jsonp和xml。<br><strong>data</strong>：向服务器发送的数据，如果使用GET方法，此项将转为查询字符串，附在网址的最后。<br><strong>success</strong>：请求成功时的回调函数，函数参数为服务器传回的数据、状态信息、发出请求的原始对象。<br><strong>timeout</strong>: 等待的最长毫秒数。如果过了这个时间，请求还没有返回，则自动将请求状态改为失败。<br><strong>error</strong>：请求失败时的回调函数，函数参数为发出请求的原始对象以及返回的状态信息。<br><strong>complete</strong>：不管请求成功或失败，都会执行的回调函数，函数参数为发出请求的原始对象以及返回的状态信息。<br>这些参数之中，url可以独立出来，作为ajax方法的第一个参数。也就是说，上面代码还可以写成下面这样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(<span class=\"string\">'/url/to/json'</span>,&#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'GET'</span>,</div><div class=\"line\">  <span class=\"attr\">dataType</span>: <span class=\"string\">'json'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>: successCallback,</div><div class=\"line\">  <span class=\"attr\">error</span>: errorCallback,</div><div class=\"line\">  <span class=\"attr\">complete</span>: completeCallback</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">successCallback</span>(<span class=\"params\">json</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'&lt;h1/&gt;'</span>).text(json.title).appendTo(<span class=\"string\">'body'</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">errorCallback</span>(<span class=\"params\">xhr, status</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'出问题了！'</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">completeCallback</span>(<span class=\"params\">xhr, status</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ajax请求已结束。'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"Ajax简便写法\"><a href=\"#Ajax简便写法\" class=\"headerlink\" title=\"Ajax简便写法\"></a>Ajax简便写法</h3><p>ajax方法还有一些简便写法。<br><strong>$.get()</strong> : 发出GET请求。<br><strong>$.getScript()</strong> : 读取一个JavaScript脚本文件并执行。<br><strong>$.getJSON()</strong> : 发出GET请求，读取一个JSON文件。<br><strong>$.post()</strong> : 发出POST请求。<br><strong>$.fn.load(</strong>) : 读取一个html文件，并将其放入当前元素之中。<br>一般来说，这些简便方法依次接受三个参数：url、数据、成功时的回调函数。</p>\n<hr>\n<h4 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"$.get()\"></a>$.get()</h4><p>对应<strong>HTTP</strong>的<strong>GET</strong>方法。<br>get方法接受两个参数，分别为服务器端网址和请求成功后的回调函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'/data/people.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'#target'</span>).html(html);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"post\"><a href=\"#post\" class=\"headerlink\" title=\"$.post()\"></a>$.post()</h4><p>对应<strong>HTTP</strong>的<strong>POST</strong>方法。<br>post方法接受三个参数，服务器端网址、发给服务器的数据和请求成功后的回调函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.post(<span class=\"string\">'/data/save'</span>, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'Rebecca'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resp</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(resp));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"getJSON\"><a href=\"#getJSON\" class=\"headerlink\" title=\"$.getJSON()\"></a>$.getJSON()</h4><p>ajax方法的另一个简便写法是getJSON方法。当服务器端返回JSON格式的数据，可以用这个方法代替$.ajax方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.getJSON(<span class=\"string\">'url/to/json'</span>, &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面的代码等同于下面的写法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">dataType</span>: <span class=\"string\">\"json\"</span>,</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/url/to/data'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>&#125;,</div><div class=\"line\">  <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"getScript\"><a href=\"#getScript\" class=\"headerlink\" title=\"$.getScript()\"></a>$.getScript()</h4><p>$.getScript方法用于从服务器端加载一个脚本文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.getScript(<span class=\"string\">'/static/js/myScript.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    functionFromMyScript();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面代码先从服务器加载myScript.js脚本，然后在回调函数中执行该脚本提供的函数。<br>getScript的回调函数接受三个参数，分别是脚本文件的内容，HTTP响应的状态信息和ajax对象实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.getScript( <span class=\"string\">\"ajax/test.js\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, textStatus, jqxhr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( data ); <span class=\"comment\">// test.js的内容</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log( textStatus ); <span class=\"comment\">// Success</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log( jqxhr.status ); <span class=\"comment\">// 200</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>getScript是ajax方法的简便写法，因此返回的是一个deferred对象，可以使用deferred接口。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.getScript(<span class=\"string\">\"/path/to/myscript.js\"</span>)</div><div class=\"line\">    .done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    .fail(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"fn-load\"><a href=\"#fn-load\" class=\"headerlink\" title=\"$.fn.load()\"></a>$.fn.load()</h4><p>$.fn.load不是jQuery的工具方法，而是定义在jQuery对象实例上的方法，用于获取服务器端的HTML文件，将其放入当前元素。由于该方法也属于ajax操作，所以放在这里一起讲。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#newContent'</span>).load(<span class=\"string\">'/foo.html'</span>);</div></pre></td></tr></table></figure></p>\n<p>$.fn.load方法还可以指定一个选择器，将远程文件中匹配选择器的部分，放入当前元素，并指定操作完成时的回调函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#newContent'</span>).load(<span class=\"string\">'/foo.html #myDiv h1:first'</span>,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'内容更新！'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面代码只加载foo.html中匹配“#myDiv h1:first”的部分，加载完成后会运行指定的回调函数。</p>\n<hr>\n<h3 id=\"Ajax事件\"><a href=\"#Ajax事件\" class=\"headerlink\" title=\"Ajax事件\"></a>Ajax事件</h3><p><strong>jQuery</strong>提供以下一些方法，用于指定特定的AJAX事件的回调函数。<br><strong>.ajaxComplete()</strong> : ajax请求完成。<br><strong>.ajaxError()</strong> : ajax请求出错。<br><strong>.ajaxSend()</strong> : ajax请求发出之前。<br><strong>.ajaxStart()</strong> : 第一个ajax请求开始发出，即没有还未完成ajax请求。<br><strong>.ajaxStop()</strong> : 所有ajax请求完成之后。<br><strong>.ajaxSuccess()</strong> : ajax请求成功之后。<br>下面是示例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#loading_indicator'</span>)</div><div class=\"line\">.ajaxStart(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;$(<span class=\"keyword\">this</span>).show();&#125;)</div><div class=\"line\">.ajaxStop(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;$(<span class=\"keyword\">this</span>).hide();&#125;);</div><div class=\"line\">$(<span class=\"string\">'#loading_indicator'</span>)</div><div class=\"line\">.ajaxStart(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;$(<span class=\"keyword\">this</span>).show();&#125;)</div><div class=\"line\">.ajaxStop(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;$(<span class=\"keyword\">this</span>).hide();&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>ajax方法返回的是一个deferred对象，可以用then方法为该对象指定回调函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/data/people.json'</span>,</div><div class=\"line\">  <span class=\"attr\">dataType</span>: <span class=\"string\">'json'</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resp</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(resp.people);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>由于浏览器存在“同域限制”，ajax方法只能向当前网页所在的域名发出HTTP请求。但是，通过在当前网页中插入script元素（\\<script>），可以向不同的域名发出GET请求，这种变通方法叫做JSONP（JSON with Padding）。<br>ajax方法可以发出JSONP请求，方法是在对象参数中指定dataType为JSONP。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/data/search.jsonp'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;<span class=\"attr\">q</span>: <span class=\"string\">'a'</span>&#125;,</div><div class=\"line\">  <span class=\"attr\">dataType</span>: <span class=\"string\">'jsonp'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#target'</span>).html(<span class=\"string\">'Results: '</span> + resp.results.length);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>JSONP的通常做法是，在所要请求的URL后面加在回调函数的名称。ajax方法规定，如果所请求的网址以类似“callback=?”的形式结尾，则自动采用JSONP形式。所以，上面的代码还可以写成下面这样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.getJSON(<span class=\"string\">'/data/search.jsonp?q=a&amp;callback=?'</span>,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#target'</span>).html(<span class=\"string\">'Results: '</span> + resp.results.length);</div><div class=\"line\">  &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n</script></p>","excerpt":"<p>AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。本文介绍了Ajax的常用写法，以及各个属性的解释说明，使之有一个大致的了解。<br>","more":"</p>\n<hr>\n<h3 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"$.ajax\"></a>$.ajax</h3><p>jQuery对象上面还定义了Ajax方法($.ajax())，用来处理Ajax操作。调用该方法后，浏览器就会向服务器发出一个HTTP请求。<br>$.ajax()的用法有多种，最常见的是提供一个对象参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  \t<span class=\"attr\">async</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  \t<span class=\"attr\">url</span>: <span class=\"string\">'/url/to/json'</span>,</div><div class=\"line\">  \t<span class=\"attr\">type</span>: <span class=\"string\">'GET'</span>,</div><div class=\"line\">  \t<span class=\"attr\">data</span> : &#123; <span class=\"attr\">id</span> : <span class=\"number\">123</span> &#125;,</div><div class=\"line\">  \t<span class=\"attr\">dataType</span>: <span class=\"string\">'json'</span>,</div><div class=\"line\">  \t<span class=\"attr\">timeout</span>: <span class=\"number\">30000</span>,</div><div class=\"line\">  \t<span class=\"attr\">success</span>: successCallback,</div><div class=\"line\">  \t<span class=\"attr\">error</span>: errorCallback,</div><div class=\"line\">  \t<span class=\"attr\">complete</span>: completeCallback</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">successCallback</span>(<span class=\"params\">json</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'&lt;h1/&gt;'</span>).text(json.title).appendTo(<span class=\"string\">'body'</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">errorCallback</span>(<span class=\"params\">xhr, status</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'出问题了！'</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">completeCallback</span>(<span class=\"params\">xhr, status</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ajax请求已结束。'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码的对象参数有多个属性，含义如下：<br><strong>async</strong>：该项默认为true，如果设为false，则表示发出的是同步请求。<br><strong>cache</strong>: 该项默认为true，如果设为false，则浏览器不缓存返回服务器返回的数据。注意，浏览器本身就不会缓存POST请求返回的数据，所以即使设为false，也只对HEAD和GET请求有效。<br><strong>url</strong>：服务器端网址。这是唯一必需的一个属性，其他属性都可以省略。<br><strong>type</strong>：向服务器发送信息所使用的HTTP动词，默认为GET，其他动词有POST、PUT、DELETE。<br><strong>dataType</strong>：向服务器请求的数据类型，可以设为text、html、script、json、jsonp和xml。<br><strong>data</strong>：向服务器发送的数据，如果使用GET方法，此项将转为查询字符串，附在网址的最后。<br><strong>success</strong>：请求成功时的回调函数，函数参数为服务器传回的数据、状态信息、发出请求的原始对象。<br><strong>timeout</strong>: 等待的最长毫秒数。如果过了这个时间，请求还没有返回，则自动将请求状态改为失败。<br><strong>error</strong>：请求失败时的回调函数，函数参数为发出请求的原始对象以及返回的状态信息。<br><strong>complete</strong>：不管请求成功或失败，都会执行的回调函数，函数参数为发出请求的原始对象以及返回的状态信息。<br>这些参数之中，url可以独立出来，作为ajax方法的第一个参数。也就是说，上面代码还可以写成下面这样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(<span class=\"string\">'/url/to/json'</span>,&#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'GET'</span>,</div><div class=\"line\">  <span class=\"attr\">dataType</span>: <span class=\"string\">'json'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>: successCallback,</div><div class=\"line\">  <span class=\"attr\">error</span>: errorCallback,</div><div class=\"line\">  <span class=\"attr\">complete</span>: completeCallback</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">successCallback</span>(<span class=\"params\">json</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'&lt;h1/&gt;'</span>).text(json.title).appendTo(<span class=\"string\">'body'</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">errorCallback</span>(<span class=\"params\">xhr, status</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'出问题了！'</span>);</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">completeCallback</span>(<span class=\"params\">xhr, status</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ajax请求已结束。'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"Ajax简便写法\"><a href=\"#Ajax简便写法\" class=\"headerlink\" title=\"Ajax简便写法\"></a>Ajax简便写法</h3><p>ajax方法还有一些简便写法。<br><strong>$.get()</strong> : 发出GET请求。<br><strong>$.getScript()</strong> : 读取一个JavaScript脚本文件并执行。<br><strong>$.getJSON()</strong> : 发出GET请求，读取一个JSON文件。<br><strong>$.post()</strong> : 发出POST请求。<br><strong>$.fn.load(</strong>) : 读取一个html文件，并将其放入当前元素之中。<br>一般来说，这些简便方法依次接受三个参数：url、数据、成功时的回调函数。</p>\n<hr>\n<h4 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"$.get()\"></a>$.get()</h4><p>对应<strong>HTTP</strong>的<strong>GET</strong>方法。<br>get方法接受两个参数，分别为服务器端网址和请求成功后的回调函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'/data/people.html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'#target'</span>).html(html);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"post\"><a href=\"#post\" class=\"headerlink\" title=\"$.post()\"></a>$.post()</h4><p>对应<strong>HTTP</strong>的<strong>POST</strong>方法。<br>post方法接受三个参数，服务器端网址、发给服务器的数据和请求成功后的回调函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.post(<span class=\"string\">'/data/save'</span>, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'Rebecca'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resp</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(resp));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"getJSON\"><a href=\"#getJSON\" class=\"headerlink\" title=\"$.getJSON()\"></a>$.getJSON()</h4><p>ajax方法的另一个简便写法是getJSON方法。当服务器端返回JSON格式的数据，可以用这个方法代替$.ajax方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.getJSON(<span class=\"string\">'url/to/json'</span>, &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面的代码等同于下面的写法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">dataType</span>: <span class=\"string\">\"json\"</span>,</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/url/to/data'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>&#125;,</div><div class=\"line\">  <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"getScript\"><a href=\"#getScript\" class=\"headerlink\" title=\"$.getScript()\"></a>$.getScript()</h4><p>$.getScript方法用于从服务器端加载一个脚本文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.getScript(<span class=\"string\">'/static/js/myScript.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    functionFromMyScript();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面代码先从服务器加载myScript.js脚本，然后在回调函数中执行该脚本提供的函数。<br>getScript的回调函数接受三个参数，分别是脚本文件的内容，HTTP响应的状态信息和ajax对象实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.getScript( <span class=\"string\">\"ajax/test.js\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, textStatus, jqxhr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log( data ); <span class=\"comment\">// test.js的内容</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log( textStatus ); <span class=\"comment\">// Success</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log( jqxhr.status ); <span class=\"comment\">// 200</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>getScript是ajax方法的简便写法，因此返回的是一个deferred对象，可以使用deferred接口。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.getScript(<span class=\"string\">\"/path/to/myscript.js\"</span>)</div><div class=\"line\">    .done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    .fail(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"fn-load\"><a href=\"#fn-load\" class=\"headerlink\" title=\"$.fn.load()\"></a>$.fn.load()</h4><p>$.fn.load不是jQuery的工具方法，而是定义在jQuery对象实例上的方法，用于获取服务器端的HTML文件，将其放入当前元素。由于该方法也属于ajax操作，所以放在这里一起讲。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#newContent'</span>).load(<span class=\"string\">'/foo.html'</span>);</div></pre></td></tr></table></figure></p>\n<p>$.fn.load方法还可以指定一个选择器，将远程文件中匹配选择器的部分，放入当前元素，并指定操作完成时的回调函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#newContent'</span>).load(<span class=\"string\">'/foo.html #myDiv h1:first'</span>,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'内容更新！'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面代码只加载foo.html中匹配“#myDiv h1:first”的部分，加载完成后会运行指定的回调函数。</p>\n<hr>\n<h3 id=\"Ajax事件\"><a href=\"#Ajax事件\" class=\"headerlink\" title=\"Ajax事件\"></a>Ajax事件</h3><p><strong>jQuery</strong>提供以下一些方法，用于指定特定的AJAX事件的回调函数。<br><strong>.ajaxComplete()</strong> : ajax请求完成。<br><strong>.ajaxError()</strong> : ajax请求出错。<br><strong>.ajaxSend()</strong> : ajax请求发出之前。<br><strong>.ajaxStart()</strong> : 第一个ajax请求开始发出，即没有还未完成ajax请求。<br><strong>.ajaxStop()</strong> : 所有ajax请求完成之后。<br><strong>.ajaxSuccess()</strong> : ajax请求成功之后。<br>下面是示例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#loading_indicator'</span>)</div><div class=\"line\">.ajaxStart(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;$(<span class=\"keyword\">this</span>).show();&#125;)</div><div class=\"line\">.ajaxStop(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;$(<span class=\"keyword\">this</span>).hide();&#125;);</div><div class=\"line\">$(<span class=\"string\">'#loading_indicator'</span>)</div><div class=\"line\">.ajaxStart(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;$(<span class=\"keyword\">this</span>).show();&#125;)</div><div class=\"line\">.ajaxStop(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;$(<span class=\"keyword\">this</span>).hide();&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>ajax方法返回的是一个deferred对象，可以用then方法为该对象指定回调函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/data/people.json'</span>,</div><div class=\"line\">  <span class=\"attr\">dataType</span>: <span class=\"string\">'json'</span></div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resp</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(resp.people);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>由于浏览器存在“同域限制”，ajax方法只能向当前网页所在的域名发出HTTP请求。但是，通过在当前网页中插入script元素（\\<script>），可以向不同的域名发出GET请求，这种变通方法叫做JSONP（JSON with Padding）。<br>ajax方法可以发出JSONP请求，方法是在对象参数中指定dataType为JSONP。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/data/search.jsonp'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;<span class=\"attr\">q</span>: <span class=\"string\">'a'</span>&#125;,</div><div class=\"line\">  <span class=\"attr\">dataType</span>: <span class=\"string\">'jsonp'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#target'</span>).html(<span class=\"string\">'Results: '</span> + resp.results.length);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>JSONP的通常做法是，在所要请求的URL后面加在回调函数的名称。ajax方法规定，如果所请求的网址以类似“callback=?”的形式结尾，则自动采用JSONP形式。所以，上面的代码还可以写成下面这样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.getJSON(<span class=\"string\">'/data/search.jsonp?q=a&amp;callback=?'</span>,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resp</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#target'</span>).html(<span class=\"string\">'Results: '</span> + resp.results.length);</div><div class=\"line\">  &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cixrheoto0007m04sn9cxakfx","category_id":"cixrheote0004m04s7rbfy0r8","_id":"cixrheott000am04szug8r0xr"},{"post_id":"cixrheotj0006m04s1nogpzrb","category_id":"cixrheote0004m04s7rbfy0r8","_id":"cixrheou1000gm04sebalo7vb"},{"post_id":"cixrheot10000m04sxwnroam8","category_id":"cixrheote0004m04s7rbfy0r8","_id":"cixrheou3000lm04srlnsdlqe"},{"post_id":"cixrheot10000m04sxwnroam8","category_id":"cixrheotw000dm04ssfyrt2he","_id":"cixrheou4000nm04s6qrgobae"},{"post_id":"cixrheot80002m04smtyiz4wa","category_id":"cixrheotr0008m04sp3cl1czc","_id":"cixrheou5000om04sapxzfqdq"},{"post_id":"cixrheot80002m04smtyiz4wa","category_id":"cixrheou2000im04syiypm18r","_id":"cixrheou5000qm04snpk1vpxf"}],"PostTag":[{"post_id":"cixrheot10000m04sxwnroam8","tag_id":"cixrheoti0005m04sc7l6senl","_id":"cixrheoty000fm04sk26hixvt"},{"post_id":"cixrheot10000m04sxwnroam8","tag_id":"cixrheots0009m04s8zl9eq7k","_id":"cixrheou2000hm04smbg4vywq"},{"post_id":"cixrheot10000m04sxwnroam8","tag_id":"cixrheott000cm04sjfrrix9b","_id":"cixrheou3000km04sabrtx914"},{"post_id":"cixrheot80002m04smtyiz4wa","tag_id":"cixrheotx000em04siuqpa34g","_id":"cixrheou6000rm04svfn2osf5"},{"post_id":"cixrheot80002m04smtyiz4wa","tag_id":"cixrheou3000jm04sxzo1jzo9","_id":"cixrheou7000sm04skal1ccov"},{"post_id":"cixrheot80002m04smtyiz4wa","tag_id":"cixrheou4000mm04slxd6cdv8","_id":"cixrheou8000um04s4vduc2z7"},{"post_id":"cixrheotj0006m04s1nogpzrb","tag_id":"cixrheou5000pm04sdubrfvtl","_id":"cixrheou8000vm04sk9w9xlec"},{"post_id":"cixrheoto0007m04sn9cxakfx","tag_id":"cixrheou5000pm04sdubrfvtl","_id":"cixrheoua000xm04sktymkbl0"},{"post_id":"cixrheoto0007m04sn9cxakfx","tag_id":"cixrheou9000wm04srubvftt0","_id":"cixrheoua000ym04si204qgqd"}],"Tag":[{"name":"JavaScript","_id":"cixrheoti0005m04sc7l6senl"},{"name":"HTML","_id":"cixrheots0009m04s8zl9eq7k"},{"name":"CSS","_id":"cixrheott000cm04sjfrrix9b"},{"name":"博客","_id":"cixrheotx000em04siuqpa34g"},{"name":"GitHub Pages","_id":"cixrheou3000jm04sxzo1jzo9"},{"name":"Hexo","_id":"cixrheou4000mm04slxd6cdv8"},{"name":"jQuery","_id":"cixrheou5000pm04sdubrfvtl"},{"name":"Ajax","_id":"cixrheou9000wm04srubvftt0"}]}}